import nest
import numpy as np
import matplotlib.pyplot as pl
from modules.signals import AnalogSignalList

neurons = nest.Create('iaf_psc_exp', 10, {'I_e': 100.})

mm1 = nest.Create('multimeter', 1, {'interval': 0.1, 'record_from': ['V_m']})
mm2 = nest.Create('multimeter', 1, {'interval': 1., 'record_from': ['V_m']})
mm3 = nest.Create('multimeter', 1, {'interval': 10., 'record_from': ['V_m']})

nest.Connect(mm1, neurons)
nest.Connect(mm2, neurons)
nest.Connect(mm3, neurons)

nest.Simulate(1000.)


events1 = nest.GetStatus(mm1)[0]['events']
events2 = nest.GetStatus(mm2)[0]['events']
events3 = nest.GetStatus(mm3)[0]['events']


def plot_events(events, ax, linestyle='-', c='b', bias=False):
	"""
	"""
	times = events['times']
	tmp = [(events['senders'][n], events['V_m'][n]) for n in range(len(events['senders']))]
	responses = AnalogSignalList(tmp, np.unique(events['senders']).tolist(), times=times)
	if bias:
		ax.plot(responses.time_axis()-0.1, responses.as_array()[0, :], linestyle, c=c)
	else:
		ax.plot(responses.time_axis(), responses.as_array()[0, :], linestyle, c=c)

fig, ax = pl.subplots()
plot_events(events1, ax, '-', 'b')
plot_events(events2, ax, '.', 'g', bias=True)
plot_events(events3, ax, '.', 'r', bias=True)

pl.show()
