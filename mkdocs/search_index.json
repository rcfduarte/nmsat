{
    "docs": [
        {
            "location": "/", 
            "text": "Neural Microcircuit Simulation and Analysis Toolkit (NMSAT)\n\n\nWhat is it?\n\n\nNMSAT is a python package that provides a set of tools to build, simulate and analyse neuronal\nmicrocircuit models with any degree of complexity, as well as to probe the circuits with arbitrarily\ncomplex input stimuli / signals and to analyse the relevant functional aspects of single neuron,\npopulation and network dynamics. It provides a high-level wrapper for PyNEST (which is used as\nthe core simulation engine). As such, the complexity of the microcircuits analysed and their building\nblocks (neuron and synapse models, circuit topology and connectivity, etc.), are determined by the\nmodels available in NEST. The use of NEST allows efficient and highly scalable simulations of very\nlarge and complex circuits, constrained only by the computational resources available to the user.\nThe modular design allows the user to specify numerical experiments with varying degrees of\ncomplexity depending on concrete research objectives. The generality of some of these experiments\nallows the same types of measurements to be performed on a variety of different circuits, which can\nbe useful for benchmarking and comparison purposes. Additionally, the code was designed to allow\nan effortless migration across computing systems, i.e. the same simulations can be executed in a\nlocal machine, in a computer cluster or a supercomputer, with straightforward resource allocation\n(see kernel parameters).\n\n\nThe code is licensed under GPLv3 and available on \nGitHub\n.\n\n\nDisclaimer\n\n\nThe code was developed primarily for personal use, as part of a PhD thesis due to the need to perform\nsimilar experiments and analyses on very diverse systems. The goal was to use the same code to\nrun diverse numerical experiments, covering a broad range of complexity, in a fully transparent and\nreproducible manner, while making efficient use of computing resources. Due to the inherent time\npressures of a PhD project and the very broad scope, the code is imperfect and under active use /\ndevelopment. Despite our best efforts, it is prone to errors and often difficult to understand, particularly\ndue to the strict specificities on the structure of the parameters dictionaries and how they are used.\n\n\nAbout the authors\n\n\nRenato Duarte ...", 
            "title": "Overview"
        }, 
        {
            "location": "/#neural-microcircuit-simulation-and-analysis-toolkit-nmsat", 
            "text": "", 
            "title": "Neural Microcircuit Simulation and Analysis Toolkit (NMSAT)"
        }, 
        {
            "location": "/#what-is-it", 
            "text": "NMSAT is a python package that provides a set of tools to build, simulate and analyse neuronal\nmicrocircuit models with any degree of complexity, as well as to probe the circuits with arbitrarily\ncomplex input stimuli / signals and to analyse the relevant functional aspects of single neuron,\npopulation and network dynamics. It provides a high-level wrapper for PyNEST (which is used as\nthe core simulation engine). As such, the complexity of the microcircuits analysed and their building\nblocks (neuron and synapse models, circuit topology and connectivity, etc.), are determined by the\nmodels available in NEST. The use of NEST allows efficient and highly scalable simulations of very\nlarge and complex circuits, constrained only by the computational resources available to the user.\nThe modular design allows the user to specify numerical experiments with varying degrees of\ncomplexity depending on concrete research objectives. The generality of some of these experiments\nallows the same types of measurements to be performed on a variety of different circuits, which can\nbe useful for benchmarking and comparison purposes. Additionally, the code was designed to allow\nan effortless migration across computing systems, i.e. the same simulations can be executed in a\nlocal machine, in a computer cluster or a supercomputer, with straightforward resource allocation\n(see kernel parameters).  The code is licensed under GPLv3 and available on  GitHub .", 
            "title": "What is it?"
        }, 
        {
            "location": "/#disclaimer", 
            "text": "The code was developed primarily for personal use, as part of a PhD thesis due to the need to perform\nsimilar experiments and analyses on very diverse systems. The goal was to use the same code to\nrun diverse numerical experiments, covering a broad range of complexity, in a fully transparent and\nreproducible manner, while making efficient use of computing resources. Due to the inherent time\npressures of a PhD project and the very broad scope, the code is imperfect and under active use /\ndevelopment. Despite our best efforts, it is prone to errors and often difficult to understand, particularly\ndue to the strict specificities on the structure of the parameters dictionaries and how they are used.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/#about-the-authors", 
            "text": "Renato Duarte ...", 
            "title": "About the authors"
        }, 
        {
            "location": "/installation/", 
            "text": "Download\n\n\nWe currently don\u2019t provide the code as a standard library that can be easily installed. In future\nversions, we will try to work on this and improve usability. For the moment, to use the code there is\nno explicit installation involved. Just fork and clone the github repository from \nhere.\n\n\nDependencies\n\n\n\n\nPython 2.7\n\n\nNEST\n version 2.8.0 or higher\n\n\nnumpy version 1.7.0 or higher \n\n\nscipy version 0.12.0 or higher\n\n\nscikit-learn version 0.18.0 or higher\n\n\nmatplotlib version 1.2.0 or higher\n\n\n\n\nOptional (add functionality):\n\n\n\n\nPySpike\n version 0.5.1\n\n\nh5py version 2.2.1 or higher\n\n\nmayavi \n\n\n\n\nGetting Started\n\n\nAfter downloading the repository, the framework's configure file, which sets the correct paths, needs to be sourced. \nThe following line should be added to .bashrc (*):\n\n\nsource\n /\n{\npath\n}\n/nmsat/configure.sh\n\n\n\n\n\nwhere \n{path}\n refers to the full path to the main NMSAT directory in your system.\nThe last step requires the user to manually specify all the paths for his system, by editing the paths dictionary in \n/defaults/paths.py\n, as:\n\n\npaths\n \n=\n \n{\n\n    \nsystem_label\n:\n \n{\n\n        \ndata_path\n:\n            \nNMSAT_HOME\n \n+\n \n/data/\n,\n\n        \njdf_template\n:\n         \nNMSAT_HOME\n \n+\n \n/defaults/cluster_templates/Blaustein_jdf.sh\n,\n\n        \nmatplotlib_rc\n:\n        \nNMSAT_HOME\n \n+\n \n/defaults/matplotlib_rc\n,\n\n        \nremote_directory\n:\n     \nNMSAT_HOME\n \n+\n \n/export/\n,\n\n        \nqueueing_system\n:\n      \nslurm\n}\n\n        \n}\n\n\n\n\n\n\nThe \nsystem_label\n specifies the name of the system. If running simulations on a local machine, the name must be set as 'local' (which is the default), otherwise, it can be any arbitrary name, as long as it is used consistently throughout (see examples). The remaining entries in this dictionary refer to:\n\n\n\n\ndata_path\n - specify where to store the output data generated by an experiment\n\n\njdf_template\n - path to a system-specific job description file (see example in /defaults/cluster_templates); if running locally set to None\n\n\nmatplotlibrc\n - in case the user wants to customize matplotlib\\footnote{\\url{\nhttp://matplotlib.org/users/customizing.html\n}}\n\n\nremote_directory\n - folder where the job submission files will be written (only applicable if not running locally, but must be specified anyway)\n\n\nqueueing_system\n - type of job schedulling system used (current options include 'slurm' and 'sge')..\n\n\n\n\nAnd that should be it. After specifying all these, it should be possible to run the framework (see below).", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#download", 
            "text": "We currently don\u2019t provide the code as a standard library that can be easily installed. In future\nversions, we will try to work on this and improve usability. For the moment, to use the code there is\nno explicit installation involved. Just fork and clone the github repository from  here.", 
            "title": "Download"
        }, 
        {
            "location": "/installation/#dependencies", 
            "text": "Python 2.7  NEST  version 2.8.0 or higher  numpy version 1.7.0 or higher   scipy version 0.12.0 or higher  scikit-learn version 0.18.0 or higher  matplotlib version 1.2.0 or higher   Optional (add functionality):   PySpike  version 0.5.1  h5py version 2.2.1 or higher  mayavi", 
            "title": "Dependencies"
        }, 
        {
            "location": "/installation/#getting-started", 
            "text": "After downloading the repository, the framework's configure file, which sets the correct paths, needs to be sourced. \nThe following line should be added to .bashrc (*):  source  / { path } /nmsat/configure.sh  where  {path}  refers to the full path to the main NMSAT directory in your system.\nThe last step requires the user to manually specify all the paths for his system, by editing the paths dictionary in  /defaults/paths.py , as:  paths   =   { \n     system_label :   { \n         data_path :              NMSAT_HOME   +   /data/ , \n         jdf_template :           NMSAT_HOME   +   /defaults/cluster_templates/Blaustein_jdf.sh , \n         matplotlib_rc :          NMSAT_HOME   +   /defaults/matplotlib_rc , \n         remote_directory :       NMSAT_HOME   +   /export/ , \n         queueing_system :        slurm } \n         }   The  system_label  specifies the name of the system. If running simulations on a local machine, the name must be set as 'local' (which is the default), otherwise, it can be any arbitrary name, as long as it is used consistently throughout (see examples). The remaining entries in this dictionary refer to:   data_path  - specify where to store the output data generated by an experiment  jdf_template  - path to a system-specific job description file (see example in /defaults/cluster_templates); if running locally set to None  matplotlibrc  - in case the user wants to customize matplotlib\\footnote{\\url{ http://matplotlib.org/users/customizing.html }}  remote_directory  - folder where the job submission files will be written (only applicable if not running locally, but must be specified anyway)  queueing_system  - type of job schedulling system used (current options include 'slurm' and 'sge')..   And that should be it. After specifying all these, it should be possible to run the framework (see below).", 
            "title": "Getting Started"
        }, 
        {
            "location": "/framework-description/", 
            "text": "The code is organized as follows:\n\n\n\u251c\u2500\u2500 nmsat\n\u2502   \u251c\u2500\u2500 modules\n\u2502   \u2502   \u251c\u2500\u2500 parameters.py\n\u2502   \u2502   \u251c\u2500\u2500 input_architect.py\n\u2502   \u2502   \u251c\u2500\u2500 net_architect.py\n\u2502   \u2502   \u251c\u2500\u2500 signals.py\n\u2502   \u2502   \u251c\u2500\u2500 analysis.py\n\u2502   \u2502   \u251c\u2500\u2500 visualization.py\n\u2502   \u2502   \u251c\u2500\u2500 io.py\n\u2502   \u251c\u2500\u2500 defaults\n\u2502   \u2502   \u251c\u2500\u2500 paths.py\n\u2502   \u2502   \u251c\u2500\u2500 matplotlib_rc\n\u2502   \u2502   \u251c\u2500\u2500 cluster_templates\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cluster_jdf.sh\n\u2502   \u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 projects\n\u2502   \u2502   \u251c\u2500\u2500 project_name\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 computations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 parameters\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 preset\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 scripts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 read_data\n\u2502   \u251c\u2500\u2500 export\n\n\n\n\n\nThe core functionality lies in the modules packages, which contain all the relevant classes and\nfunctions used. The specifics will be explained in greater detail below, but in general the modules\nare responsible for:\n\n\n\n\nparameters\n - parsing and preparing all parameters files; retrieving stored parameter sets and\nspaces and harvesting data\n\n\ninput_architect\n - generating and setting up all the relevant input stimuli and signals; handling\ninput data; generating and connecting input encoding layers\n\n\nnet_architect\n - generating specific networks and neuronal populations; generating all connectivity and topology features; \nconnecting populations; ...\n\n\nsignals\n - wrapping and processing the various signal types used in the framework (spiking activity,\nanalog variables, etc)\n\n\nanalysis\n - post-processing and analysing population activity in various ways\n\n\nvisualization\n - plotting routines\n\n\nio\n - loading and saving data", 
            "title": "Quick overview"
        }, 
        {
            "location": "/standard-use-case/", 
            "text": "A numerical experiment in this framework consists of 2 or 3 main files (see examples):\n\n\n\n\nparameters_file\n - specifying all the complex parameter sets and dictionaries required to set up\nthe experiment.\n\n\nexperiment_script\n - mostly used during development, for testing and debugging purposes.\nThese scripts parse the parameters_file and run the complete experiment\n\n\ncomputation_file\n - after the development and testing phase is completed, the experiment can\nbe copied to a computation_file, which can be used from the main... (*)\n\n\n\n\nThese files should be stored within a \"project\" folder, in the \"parameters\", \"scripts\" and \"compu-\ntations\" folders, respectively.\n\n\nRunning an experiment\n\n\nThe way in which an experiment is run depends on the system used:\n\n\nLocal machine\n\n\nJust go to the main nmsat directory and execute the experiment as:\n\n\npython\n \nmain\n.\npy\n \n-\nf\n \n{\nparameters_file\n}\n \n-\nc\n \n{\ncomputation_function\n}\n \n--\nextra\n \n{\nextra_parameters\n}\n\n\n\n\n\n\nwhere \nparameters_file\n refers to the (full or relative) path to the parameters file for the experiment,\n\ncomputation_function\n is the name of the computation function to be executed on that parameter\nset (must match the name of a file in the project\u2019s \u2019computations\u2019 folder) and \nextra_parameters\n are\nparameter=value pairs for different, extra parameters (specific to each computation).\n\n\nCluster\n\n\nOn a computer cluster or supercomputer, the execution of the framework has a slightly different meaning. \nInstead of executing the code, it generates a series of files that can be used to submit the jobs to the system\u2019s scheduler.\n\n\nTo do this:\n\n\n\n\nadd an entry to \nnmsat/defaults/paths.py\n for your template (here \u2019Blaustein\u2019)\n\n\nadapt the default cluster template in \nnmsat/defaults/cluster_templates/Blaustein_jdf.sh\n\nto match your cluster requirements\n\n\nchange \nrun=\u2019local\u2019\n to \nrun=\u2019Blaustein\u2019\n in your parameter script\n\n\nexecute the following command from \nnmsat/\n\n\n\n\npython\n \nmain\n.\npy\n \n-\nf\n \n{\nparameters_file\n}\n \n-\nc\n \n{\ncomputation_function\n}\n \n--\nextra\n \n{\nextra_parameters\n}\n \n--\ncluster\n=\nBlaustein\n\n\n\n\n\n\n\n\ngo to \nnmsat/export/my_project_name/\n and submit jobs  via\n\n\n\n\npython\n \nsubmit_jobs\n.\npy\n \n0\n \n1", 
            "title": "Standard use case"
        }, 
        {
            "location": "/standard-use-case/#running-an-experiment", 
            "text": "The way in which an experiment is run depends on the system used:", 
            "title": "Running an experiment"
        }, 
        {
            "location": "/standard-use-case/#local-machine", 
            "text": "Just go to the main nmsat directory and execute the experiment as:  python   main . py   - f   { parameters_file }   - c   { computation_function }   -- extra   { extra_parameters }   where  parameters_file  refers to the (full or relative) path to the parameters file for the experiment, computation_function  is the name of the computation function to be executed on that parameter\nset (must match the name of a file in the project\u2019s \u2019computations\u2019 folder) and  extra_parameters  are\nparameter=value pairs for different, extra parameters (specific to each computation).", 
            "title": "Local machine"
        }, 
        {
            "location": "/standard-use-case/#cluster", 
            "text": "On a computer cluster or supercomputer, the execution of the framework has a slightly different meaning. \nInstead of executing the code, it generates a series of files that can be used to submit the jobs to the system\u2019s scheduler.  To do this:   add an entry to  nmsat/defaults/paths.py  for your template (here \u2019Blaustein\u2019)  adapt the default cluster template in  nmsat/defaults/cluster_templates/Blaustein_jdf.sh \nto match your cluster requirements  change  run=\u2019local\u2019  to  run=\u2019Blaustein\u2019  in your parameter script  execute the following command from  nmsat/   python   main . py   - f   { parameters_file }   - c   { computation_function }   -- extra   { extra_parameters }   -- cluster = Blaustein    go to  nmsat/export/my_project_name/  and submit jobs  via   python   submit_jobs . py   0   1", 
            "title": "Cluster"
        }, 
        {
            "location": "/parameters/", 
            "text": "Getting started\n\n\nInstallation\n\n\n\n\nSet up Material using Docker\n\n\nThe official \nDocker image\n for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).\n\n\n\n\nInstalling MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\n\nMkDocs version requirements\n\n\nMaterial requires MkDocs \n= 0.16.\n\n\n\n\nFurthermore, it is highly recommended to install \nPygments\n and the\n\nPyMdown Extensions\n to get the most out of the Material theme:\n\n\npip install pygments\npip install pymdown-extensions\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\npip install mkdocs-material\n\n\n\n\n\nusing choco\n\n\nIf you're on Windows you can use \nChocolatey\n to install \nMaterial\n:\n\n\nchoco install mkdocs-material\n\n\n\n\n\nThis will also install all required dependencies like \nPython\n and\n\nMkDocs\n.\n\n\ncloning from GitHub\n\n\nMaterial can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:\n\n\ngit clone https://github.com/squidfunk/mkdocs-material.git\n\n\n\n\n\nThis is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder\n\nmkdocs-material/material\n.\n\n\nTroubleshooting\n\n\n\n\nInstallation on macOS\n\n\nWhen you're running the pre-installed version of Python on macOS, \npip\n\ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:\n\n\n\n\n\n\nInstalling in user space\n (recommended): Provide the \n--user\n flag\n  to the install command and \npip\n will install the package in a user-site\n  location. This is the recommended way.\n\n\n\n\n\n\nSwitching to a homebrewed Python\n: Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with \npip\n.\n\n\n\n\n\n\n\n\n\n\nError: unrecognized theme 'material'\n\n\nIf you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or \napt-get\n) and the\nMaterial theme through \npip\n, so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.\n\n\n\n\nUsage\n\n\nIn order to enable the Material theme just add one of the following lines to\nyour \nmkdocs.yml\n. If you installed Material using pip:\n\n\ntheme\n:\n \nmaterial\n\n\n\n\n\n\nIf you cloned Material from GitHub:\n\n\ntheme_dir\n:\n \nmkdocs-material/material\n\n\n\n\n\n\nMkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:\n\n\nmkdocs serve\n\n\n\n\n\nNow you can point your browser to \nlocalhost:8000\n and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.\n\n\nOptions\n\n\nThe Material theme adds some extra variables for configuration via your\nproject's \nmkdocs.yml\n. See the following sections for all available options.\n\n\nChanging the color palette\n\n\nMaterial defines a default hue for every primary and accent color on Google's\nMaterial Design \ncolor palette\n. This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nlight\n \nblue\n\n\n\n\n\n\nColor names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are: \nred\n, \npink\n, \npurple\n, \ndeep purple\n,\n\nindigo\n, \nblue\n, \nlight blue\n, \ncyan\n, \nteal\n, \ngreen\n, \nlight green\n, \nlime\n,\n\nyellow\n, \namber\n, \norange\n, \ndeep orange\n, \nbrown\n, \ngrey\n and \nblue grey\n.\nThe last three colors can only be used as a primary color.\n\n\nIf the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on \ncustomization\n for more information.\n\n\nPrimary colors\n\n\nClick on a tile to change the primary color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })\n\n\n\n\nAccent colors\n\n\nClick on a tile to change the accent color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })\n\n\n\n\nChanging the font family\n\n\nMaterial uses the \nRoboto font family\n by default, specifically the regular\nsans-serif type for text and the \nmonospaced\n type for code. Both fonts are\nloaded from \nGoogle Fonts\n and can easily be changed to other fonts, like\nfor example the \nUbuntu font family\n:\n\n\nextra\n:\n\n  \nfont\n:\n\n    \ntext\n:\n \nUbuntu\n\n    \ncode\n:\n \nUbuntu\n \nMono\n\n\n\n\n\n\nThe text font will be loaded in font-weights 400 and \n700\n, the \nmonospaced\n\nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set \nfont\n to \nfalse\n:\n\n\nextra\n:\n\n  \nfont\n:\n \nfalse\n\n\n\n\n\n\nAdding a source repository\n\n\nTo include a link to the repository of your project within your documentation,\nset the following variables via your project's \nmkdocs.yml\n:\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n\n\n\nMaterial will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if \nrepo_url\n points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.\n\n\n\n\nWhy is there an edit button at the top of every article?\n\n\nIf the \nrepo_url\n is set to a GitHub or BitBucket repository, and the\n\nrepo_name\n is set to \nGitHub\n or \nBitBucket\n (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the \nMkDocs documentation\n on more\nguidance regarding the \nedit_uri\n attribute, which defines whether the edit\nbutton is shown or not.\n\n\n\n\nAdding a logo\n\n\nMaterial makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder\n\ndocs/images\n, add your logo and embed it with:\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n\n\n\n\n\nAdding social links\n\n\nIf you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded \nFontAwesome\n webfont. The syntax is simple \u2013 the \ntype\n must\ndenote the name of the social service, e.g. \ngithub\n, \ntwitter\n or \nlinkedin\n\nand the \nlink\n must contain the URL you want to link to:\n\n\nextra\n:\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/squidfunk\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/squidfunk\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/martin-donath-20a95039\n\n\n\n\n\n\nThe links are generated in order and the \ntype\n of the links must match the\nname of the FontAwesome glyph. The \nfa\n is automatically added, so \ngithub\n\nwill result in \nfa fa-github\n.\n\n\nGoogle Analytics integration\n\n\nMkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's\n\nmkdocs.yml\n:\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n\n\n\nDisqus integation\n\n\nMaterial for MkDocs is integrated with \nDisqus\n, so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \ndisqus\n:\n \nyour-disqus-shortname\n\n\n\n\n\n\nA new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.\n\n\nLocalization\n\n\nMaterial for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g. \nPrevious\n and \nNext\n in the footer), you can override the\nfile \npartials/language.html\n and provide your own translations inside the\nmacro \nt\n:\n\n\n{%\n \nmacro\n \nt\n(\nkey\n)\n \n%}{{\n \n{\n\n  \nlanguage\n:\n \nen\n,\n\n  \nedit.link.title\n:\n \nEdit this page\n,\n\n  \nfooter.previous\n:\n \nPrevious\n,\n\n  \nfooter.next\n:\n \nNext\n,\n\n  \nmeta.comments\n:\n \nComments\n,\n\n  \nmeta.source\n:\n \nSource\n,\n\n  \nsearch.placeholder\n:\n \nSearch\n,\n\n  \nsearch.result.placeholder\n:\n \nType to start searching\n,\n\n  \nsearch.result.none\n:\n \nNo matching documents\n,\n\n  \nsearch.result.one\n:\n \n1 matching document\n,\n\n  \nsearch.result.other\n:\n \n# matching documents\n,\n\n  \nsource.link.title\n:\n \nGo to repository\n,\n\n  \ntoc.title\n:\n \nTable of contents\n\n\n}[\nkey\n]\n \n}}{%\n \nendmacro\n \n%}\n\n\n\n\n\n\nJust copy the file from the original theme and make your adjustments. See the\nsection on \noverriding partials\n and the general guide on\n\ntheme extension\n in the customization guide.\n\n\nTabs\n\n\nFrom version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:\n\n\nextra\n:\n\n  \nfeature\n:\n\n    \ntabs\n:\n \ntrue\n\n\n\n\n\n\nMore advanced customization\n\n\nIf you want to change the general appearance of the Material theme, see\n\nthis article\n for more information on advanced customization.\n\n\nExtensions\n\n\nMkDocs supports several \nMarkdown extensions\n. The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)\n\n\n\n\n\n\nFor more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:\n\n\n\n\nAdmonition\n\n\nCodehilite\n\n\nFootnotes\n\n\nMetadata\n\n\nPermalinks\n\n\nPyMdown Extensions\n\n\n\n\nFull example\n\n\nBelow is a full example configuration for a \nmkdocs.yml\n:\n\n\n# Project information\n\n\nsite_name\n:\n \nMy\n \nProject\n\n\nsite_description\n:\n \nA\n \nshort\n \ndescription\n \nof\n \nmy\n \nproject\n\n\nsite_author\n:\n \nJohn\n \nDoe\n\n\nsite_url\n:\n \nhttps://my-github-handle.github.io/my-project\n\n\n\n# Repository\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n# Copyright\n\n\ncopyright\n:\n \nCopyright\n \ncopy;\n \n2016\n \n-\n \n2017\n \nJohn\n \nDoe\n\n\n\n# Documentation and theme\n\n\ntheme\n:\n \nmaterial\n\n\n\n# Options\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nindigo\n\n  \nfont\n:\n\n    \ntext\n:\n \nRoboto\n\n    \ncode\n:\n \nRoboto\n \nMono\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/john-doe\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/jonh-doe\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/john-doe\n\n\n\n# Google Analytics\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n# Extensions\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)", 
            "title": "Parameters file and parameters module"
        }, 
        {
            "location": "/parameters/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/parameters/#installation", 
            "text": "Set up Material using Docker  The official  Docker image  for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).", 
            "title": "Installation"
        }, 
        {
            "location": "/parameters/#installing-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  python --version # Python 2.7.13 \npip --version # pip 9.0.1   Installing and verifying MkDocs is as simple as:  pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0    MkDocs version requirements  Material requires MkDocs  = 0.16.   Furthermore, it is highly recommended to install  Pygments  and the PyMdown Extensions  to get the most out of the Material theme:  pip install pygments\npip install pymdown-extensions", 
            "title": "Installing MkDocs"
        }, 
        {
            "location": "/parameters/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/parameters/#using-pip", 
            "text": "Material can be installed with  pip :  pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/parameters/#using-choco", 
            "text": "If you're on Windows you can use  Chocolatey  to install  Material :  choco install mkdocs-material  This will also install all required dependencies like  Python  and MkDocs .", 
            "title": "using choco"
        }, 
        {
            "location": "/parameters/#cloning-from-github", 
            "text": "Material can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:  git clone https://github.com/squidfunk/mkdocs-material.git  This is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder mkdocs-material/material .", 
            "title": "cloning from GitHub"
        }, 
        {
            "location": "/parameters/#troubleshooting", 
            "text": "Installation on macOS  When you're running the pre-installed version of Python on macOS,  pip \ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:    Installing in user space  (recommended): Provide the  --user  flag\n  to the install command and  pip  will install the package in a user-site\n  location. This is the recommended way.    Switching to a homebrewed Python : Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with  pip .      Error: unrecognized theme 'material'  If you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or  apt-get ) and the\nMaterial theme through  pip , so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/parameters/#usage", 
            "text": "In order to enable the Material theme just add one of the following lines to\nyour  mkdocs.yml . If you installed Material using pip:  theme :   material   If you cloned Material from GitHub:  theme_dir :   mkdocs-material/material   MkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:  mkdocs serve  Now you can point your browser to  localhost:8000  and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.", 
            "title": "Usage"
        }, 
        {
            "location": "/parameters/#options", 
            "text": "The Material theme adds some extra variables for configuration via your\nproject's  mkdocs.yml . See the following sections for all available options.", 
            "title": "Options"
        }, 
        {
            "location": "/parameters/#changing-the-color-palette", 
            "text": "Material defines a default hue for every primary and accent color on Google's\nMaterial Design  color palette . This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your  mkdocs.yml :  extra : \n   palette : \n     primary :   indigo \n     accent :   light   blue   Color names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are:  red ,  pink ,  purple ,  deep purple , indigo ,  blue ,  light blue ,  cyan ,  teal ,  green ,  light green ,  lime , yellow ,  amber ,  orange ,  deep orange ,  brown ,  grey  and  blue grey .\nThe last three colors can only be used as a primary color.  If the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on  customization  for more information.", 
            "title": "Changing the color palette"
        }, 
        {
            "location": "/parameters/#primary-colors", 
            "text": "Click on a tile to change the primary color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })", 
            "title": "Primary colors"
        }, 
        {
            "location": "/parameters/#accent-colors", 
            "text": "Click on a tile to change the accent color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })", 
            "title": "Accent colors"
        }, 
        {
            "location": "/parameters/#changing-the-font-family", 
            "text": "Material uses the  Roboto font family  by default, specifically the regular\nsans-serif type for text and the  monospaced  type for code. Both fonts are\nloaded from  Google Fonts  and can easily be changed to other fonts, like\nfor example the  Ubuntu font family :  extra : \n   font : \n     text :   Ubuntu \n     code :   Ubuntu   Mono   The text font will be loaded in font-weights 400 and  700 , the  monospaced \nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set  font  to  false :  extra : \n   font :   false", 
            "title": "Changing the font family"
        }, 
        {
            "location": "/parameters/#adding-a-source-repository", 
            "text": "To include a link to the repository of your project within your documentation,\nset the following variables via your project's  mkdocs.yml :  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project   Material will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if  repo_url  points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.   Why is there an edit button at the top of every article?  If the  repo_url  is set to a GitHub or BitBucket repository, and the repo_name  is set to  GitHub  or  BitBucket  (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the  MkDocs documentation  on more\nguidance regarding the  edit_uri  attribute, which defines whether the edit\nbutton is shown or not.", 
            "title": "Adding a source repository"
        }, 
        {
            "location": "/parameters/#adding-a-logo", 
            "text": "Material makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with:  extra : \n   logo :   images/logo.svg", 
            "title": "Adding a logo"
        }, 
        {
            "location": "/parameters/#adding-social-links", 
            "text": "If you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded  FontAwesome  webfont. The syntax is simple \u2013 the  type  must\ndenote the name of the social service, e.g.  github ,  twitter  or  linkedin \nand the  link  must contain the URL you want to link to:  extra : \n   social : \n     -   type :   github \n       link :   https://github.com/squidfunk \n     -   type :   twitter \n       link :   https://twitter.com/squidfunk \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/martin-donath-20a95039   The links are generated in order and the  type  of the links must match the\nname of the FontAwesome glyph. The  fa  is automatically added, so  github \nwill result in  fa fa-github .", 
            "title": "Adding social links"
        }, 
        {
            "location": "/parameters/#google-analytics-integration", 
            "text": "MkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's mkdocs.yml :  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto", 
            "title": "Google Analytics integration"
        }, 
        {
            "location": "/parameters/#disqus-integation", 
            "text": "Material for MkDocs is integrated with  Disqus , so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your  mkdocs.yml :  extra : \n   disqus :   your-disqus-shortname   A new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.", 
            "title": "Disqus integation"
        }, 
        {
            "location": "/parameters/#localization", 
            "text": "Material for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g.  Previous  and  Next  in the footer), you can override the\nfile  partials/language.html  and provide your own translations inside the\nmacro  t :  {%   macro   t ( key )   %}{{   { \n   language :   en , \n   edit.link.title :   Edit this page , \n   footer.previous :   Previous , \n   footer.next :   Next , \n   meta.comments :   Comments , \n   meta.source :   Source , \n   search.placeholder :   Search , \n   search.result.placeholder :   Type to start searching , \n   search.result.none :   No matching documents , \n   search.result.one :   1 matching document , \n   search.result.other :   # matching documents , \n   source.link.title :   Go to repository , \n   toc.title :   Table of contents  }[ key ]   }}{%   endmacro   %}   Just copy the file from the original theme and make your adjustments. See the\nsection on  overriding partials  and the general guide on theme extension  in the customization guide.", 
            "title": "Localization"
        }, 
        {
            "location": "/parameters/#tabs", 
            "text": "From version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:  extra : \n   feature : \n     tabs :   true", 
            "title": "Tabs"
        }, 
        {
            "location": "/parameters/#more-advanced-customization", 
            "text": "If you want to change the general appearance of the Material theme, see this article  for more information on advanced customization.", 
            "title": "More advanced customization"
        }, 
        {
            "location": "/parameters/#extensions", 
            "text": "MkDocs supports several  Markdown extensions . The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)   For more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:   Admonition  Codehilite  Footnotes  Metadata  Permalinks  PyMdown Extensions", 
            "title": "Extensions"
        }, 
        {
            "location": "/parameters/#full-example", 
            "text": "Below is a full example configuration for a  mkdocs.yml :  # Project information  site_name :   My   Project  site_description :   A   short   description   of   my   project  site_author :   John   Doe  site_url :   https://my-github-handle.github.io/my-project  # Repository  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project  # Copyright  copyright :   Copyright   copy;   2016   -   2017   John   Doe  # Documentation and theme  theme :   material  # Options  extra : \n   logo :   images/logo.svg \n   palette : \n     primary :   indigo \n     accent :   indigo \n   font : \n     text :   Roboto \n     code :   Roboto   Mono \n   social : \n     -   type :   github \n       link :   https://github.com/john-doe \n     -   type :   twitter \n       link :   https://twitter.com/jonh-doe \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/john-doe  # Google Analytics  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto  # Extensions  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)", 
            "title": "Full example"
        }, 
        {
            "location": "/input/", 
            "text": "Getting started\n\n\nInstallation\n\n\n\n\nSet up Material using Docker\n\n\nThe official \nDocker image\n for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).\n\n\n\n\nInstalling MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\n\nMkDocs version requirements\n\n\nMaterial requires MkDocs \n= 0.16.\n\n\n\n\nFurthermore, it is highly recommended to install \nPygments\n and the\n\nPyMdown Extensions\n to get the most out of the Material theme:\n\n\npip install pygments\npip install pymdown-extensions\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\npip install mkdocs-material\n\n\n\n\n\nusing choco\n\n\nIf you're on Windows you can use \nChocolatey\n to install \nMaterial\n:\n\n\nchoco install mkdocs-material\n\n\n\n\n\nThis will also install all required dependencies like \nPython\n and\n\nMkDocs\n.\n\n\ncloning from GitHub\n\n\nMaterial can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:\n\n\ngit clone https://github.com/squidfunk/mkdocs-material.git\n\n\n\n\n\nThis is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder\n\nmkdocs-material/material\n.\n\n\nTroubleshooting\n\n\n\n\nInstallation on macOS\n\n\nWhen you're running the pre-installed version of Python on macOS, \npip\n\ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:\n\n\n\n\n\n\nInstalling in user space\n (recommended): Provide the \n--user\n flag\n  to the install command and \npip\n will install the package in a user-site\n  location. This is the recommended way.\n\n\n\n\n\n\nSwitching to a homebrewed Python\n: Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with \npip\n.\n\n\n\n\n\n\n\n\n\n\nError: unrecognized theme 'material'\n\n\nIf you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or \napt-get\n) and the\nMaterial theme through \npip\n, so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.\n\n\n\n\nUsage\n\n\nIn order to enable the Material theme just add one of the following lines to\nyour \nmkdocs.yml\n. If you installed Material using pip:\n\n\ntheme\n:\n \nmaterial\n\n\n\n\n\n\nIf you cloned Material from GitHub:\n\n\ntheme_dir\n:\n \nmkdocs-material/material\n\n\n\n\n\n\nMkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:\n\n\nmkdocs serve\n\n\n\n\n\nNow you can point your browser to \nlocalhost:8000\n and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.\n\n\nOptions\n\n\nThe Material theme adds some extra variables for configuration via your\nproject's \nmkdocs.yml\n. See the following sections for all available options.\n\n\nChanging the color palette\n\n\nMaterial defines a default hue for every primary and accent color on Google's\nMaterial Design \ncolor palette\n. This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nlight\n \nblue\n\n\n\n\n\n\nColor names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are: \nred\n, \npink\n, \npurple\n, \ndeep purple\n,\n\nindigo\n, \nblue\n, \nlight blue\n, \ncyan\n, \nteal\n, \ngreen\n, \nlight green\n, \nlime\n,\n\nyellow\n, \namber\n, \norange\n, \ndeep orange\n, \nbrown\n, \ngrey\n and \nblue grey\n.\nThe last three colors can only be used as a primary color.\n\n\nIf the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on \ncustomization\n for more information.\n\n\nPrimary colors\n\n\nClick on a tile to change the primary color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })\n\n\n\n\nAccent colors\n\n\nClick on a tile to change the accent color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })\n\n\n\n\nChanging the font family\n\n\nMaterial uses the \nRoboto font family\n by default, specifically the regular\nsans-serif type for text and the \nmonospaced\n type for code. Both fonts are\nloaded from \nGoogle Fonts\n and can easily be changed to other fonts, like\nfor example the \nUbuntu font family\n:\n\n\nextra\n:\n\n  \nfont\n:\n\n    \ntext\n:\n \nUbuntu\n\n    \ncode\n:\n \nUbuntu\n \nMono\n\n\n\n\n\n\nThe text font will be loaded in font-weights 400 and \n700\n, the \nmonospaced\n\nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set \nfont\n to \nfalse\n:\n\n\nextra\n:\n\n  \nfont\n:\n \nfalse\n\n\n\n\n\n\nAdding a source repository\n\n\nTo include a link to the repository of your project within your documentation,\nset the following variables via your project's \nmkdocs.yml\n:\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n\n\n\nMaterial will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if \nrepo_url\n points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.\n\n\n\n\nWhy is there an edit button at the top of every article?\n\n\nIf the \nrepo_url\n is set to a GitHub or BitBucket repository, and the\n\nrepo_name\n is set to \nGitHub\n or \nBitBucket\n (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the \nMkDocs documentation\n on more\nguidance regarding the \nedit_uri\n attribute, which defines whether the edit\nbutton is shown or not.\n\n\n\n\nAdding a logo\n\n\nMaterial makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder\n\ndocs/images\n, add your logo and embed it with:\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n\n\n\n\n\nAdding social links\n\n\nIf you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded \nFontAwesome\n webfont. The syntax is simple \u2013 the \ntype\n must\ndenote the name of the social service, e.g. \ngithub\n, \ntwitter\n or \nlinkedin\n\nand the \nlink\n must contain the URL you want to link to:\n\n\nextra\n:\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/squidfunk\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/squidfunk\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/martin-donath-20a95039\n\n\n\n\n\n\nThe links are generated in order and the \ntype\n of the links must match the\nname of the FontAwesome glyph. The \nfa\n is automatically added, so \ngithub\n\nwill result in \nfa fa-github\n.\n\n\nGoogle Analytics integration\n\n\nMkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's\n\nmkdocs.yml\n:\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n\n\n\nDisqus integation\n\n\nMaterial for MkDocs is integrated with \nDisqus\n, so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \ndisqus\n:\n \nyour-disqus-shortname\n\n\n\n\n\n\nA new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.\n\n\nLocalization\n\n\nMaterial for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g. \nPrevious\n and \nNext\n in the footer), you can override the\nfile \npartials/language.html\n and provide your own translations inside the\nmacro \nt\n:\n\n\n{%\n \nmacro\n \nt\n(\nkey\n)\n \n%}{{\n \n{\n\n  \nlanguage\n:\n \nen\n,\n\n  \nedit.link.title\n:\n \nEdit this page\n,\n\n  \nfooter.previous\n:\n \nPrevious\n,\n\n  \nfooter.next\n:\n \nNext\n,\n\n  \nmeta.comments\n:\n \nComments\n,\n\n  \nmeta.source\n:\n \nSource\n,\n\n  \nsearch.placeholder\n:\n \nSearch\n,\n\n  \nsearch.result.placeholder\n:\n \nType to start searching\n,\n\n  \nsearch.result.none\n:\n \nNo matching documents\n,\n\n  \nsearch.result.one\n:\n \n1 matching document\n,\n\n  \nsearch.result.other\n:\n \n# matching documents\n,\n\n  \nsource.link.title\n:\n \nGo to repository\n,\n\n  \ntoc.title\n:\n \nTable of contents\n\n\n}[\nkey\n]\n \n}}{%\n \nendmacro\n \n%}\n\n\n\n\n\n\nJust copy the file from the original theme and make your adjustments. See the\nsection on \noverriding partials\n and the general guide on\n\ntheme extension\n in the customization guide.\n\n\nTabs\n\n\nFrom version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:\n\n\nextra\n:\n\n  \nfeature\n:\n\n    \ntabs\n:\n \ntrue\n\n\n\n\n\n\nMore advanced customization\n\n\nIf you want to change the general appearance of the Material theme, see\n\nthis article\n for more information on advanced customization.\n\n\nExtensions\n\n\nMkDocs supports several \nMarkdown extensions\n. The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)\n\n\n\n\n\n\nFor more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:\n\n\n\n\nAdmonition\n\n\nCodehilite\n\n\nFootnotes\n\n\nMetadata\n\n\nPermalinks\n\n\nPyMdown Extensions\n\n\n\n\nFull example\n\n\nBelow is a full example configuration for a \nmkdocs.yml\n:\n\n\n# Project information\n\n\nsite_name\n:\n \nMy\n \nProject\n\n\nsite_description\n:\n \nA\n \nshort\n \ndescription\n \nof\n \nmy\n \nproject\n\n\nsite_author\n:\n \nJohn\n \nDoe\n\n\nsite_url\n:\n \nhttps://my-github-handle.github.io/my-project\n\n\n\n# Repository\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n# Copyright\n\n\ncopyright\n:\n \nCopyright\n \ncopy;\n \n2016\n \n-\n \n2017\n \nJohn\n \nDoe\n\n\n\n# Documentation and theme\n\n\ntheme\n:\n \nmaterial\n\n\n\n# Options\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nindigo\n\n  \nfont\n:\n\n    \ntext\n:\n \nRoboto\n\n    \ncode\n:\n \nRoboto\n \nMono\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/john-doe\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/jonh-doe\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/john-doe\n\n\n\n# Google Analytics\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n# Extensions\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)", 
            "title": "Input specification and generation"
        }, 
        {
            "location": "/input/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/input/#installation", 
            "text": "Set up Material using Docker  The official  Docker image  for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).", 
            "title": "Installation"
        }, 
        {
            "location": "/input/#installing-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  python --version # Python 2.7.13 \npip --version # pip 9.0.1   Installing and verifying MkDocs is as simple as:  pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0    MkDocs version requirements  Material requires MkDocs  = 0.16.   Furthermore, it is highly recommended to install  Pygments  and the PyMdown Extensions  to get the most out of the Material theme:  pip install pygments\npip install pymdown-extensions", 
            "title": "Installing MkDocs"
        }, 
        {
            "location": "/input/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/input/#using-pip", 
            "text": "Material can be installed with  pip :  pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/input/#using-choco", 
            "text": "If you're on Windows you can use  Chocolatey  to install  Material :  choco install mkdocs-material  This will also install all required dependencies like  Python  and MkDocs .", 
            "title": "using choco"
        }, 
        {
            "location": "/input/#cloning-from-github", 
            "text": "Material can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:  git clone https://github.com/squidfunk/mkdocs-material.git  This is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder mkdocs-material/material .", 
            "title": "cloning from GitHub"
        }, 
        {
            "location": "/input/#troubleshooting", 
            "text": "Installation on macOS  When you're running the pre-installed version of Python on macOS,  pip \ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:    Installing in user space  (recommended): Provide the  --user  flag\n  to the install command and  pip  will install the package in a user-site\n  location. This is the recommended way.    Switching to a homebrewed Python : Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with  pip .      Error: unrecognized theme 'material'  If you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or  apt-get ) and the\nMaterial theme through  pip , so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/input/#usage", 
            "text": "In order to enable the Material theme just add one of the following lines to\nyour  mkdocs.yml . If you installed Material using pip:  theme :   material   If you cloned Material from GitHub:  theme_dir :   mkdocs-material/material   MkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:  mkdocs serve  Now you can point your browser to  localhost:8000  and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.", 
            "title": "Usage"
        }, 
        {
            "location": "/input/#options", 
            "text": "The Material theme adds some extra variables for configuration via your\nproject's  mkdocs.yml . See the following sections for all available options.", 
            "title": "Options"
        }, 
        {
            "location": "/input/#changing-the-color-palette", 
            "text": "Material defines a default hue for every primary and accent color on Google's\nMaterial Design  color palette . This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your  mkdocs.yml :  extra : \n   palette : \n     primary :   indigo \n     accent :   light   blue   Color names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are:  red ,  pink ,  purple ,  deep purple , indigo ,  blue ,  light blue ,  cyan ,  teal ,  green ,  light green ,  lime , yellow ,  amber ,  orange ,  deep orange ,  brown ,  grey  and  blue grey .\nThe last three colors can only be used as a primary color.  If the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on  customization  for more information.", 
            "title": "Changing the color palette"
        }, 
        {
            "location": "/input/#primary-colors", 
            "text": "Click on a tile to change the primary color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })", 
            "title": "Primary colors"
        }, 
        {
            "location": "/input/#accent-colors", 
            "text": "Click on a tile to change the accent color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })", 
            "title": "Accent colors"
        }, 
        {
            "location": "/input/#changing-the-font-family", 
            "text": "Material uses the  Roboto font family  by default, specifically the regular\nsans-serif type for text and the  monospaced  type for code. Both fonts are\nloaded from  Google Fonts  and can easily be changed to other fonts, like\nfor example the  Ubuntu font family :  extra : \n   font : \n     text :   Ubuntu \n     code :   Ubuntu   Mono   The text font will be loaded in font-weights 400 and  700 , the  monospaced \nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set  font  to  false :  extra : \n   font :   false", 
            "title": "Changing the font family"
        }, 
        {
            "location": "/input/#adding-a-source-repository", 
            "text": "To include a link to the repository of your project within your documentation,\nset the following variables via your project's  mkdocs.yml :  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project   Material will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if  repo_url  points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.   Why is there an edit button at the top of every article?  If the  repo_url  is set to a GitHub or BitBucket repository, and the repo_name  is set to  GitHub  or  BitBucket  (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the  MkDocs documentation  on more\nguidance regarding the  edit_uri  attribute, which defines whether the edit\nbutton is shown or not.", 
            "title": "Adding a source repository"
        }, 
        {
            "location": "/input/#adding-a-logo", 
            "text": "Material makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with:  extra : \n   logo :   images/logo.svg", 
            "title": "Adding a logo"
        }, 
        {
            "location": "/input/#adding-social-links", 
            "text": "If you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded  FontAwesome  webfont. The syntax is simple \u2013 the  type  must\ndenote the name of the social service, e.g.  github ,  twitter  or  linkedin \nand the  link  must contain the URL you want to link to:  extra : \n   social : \n     -   type :   github \n       link :   https://github.com/squidfunk \n     -   type :   twitter \n       link :   https://twitter.com/squidfunk \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/martin-donath-20a95039   The links are generated in order and the  type  of the links must match the\nname of the FontAwesome glyph. The  fa  is automatically added, so  github \nwill result in  fa fa-github .", 
            "title": "Adding social links"
        }, 
        {
            "location": "/input/#google-analytics-integration", 
            "text": "MkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's mkdocs.yml :  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto", 
            "title": "Google Analytics integration"
        }, 
        {
            "location": "/input/#disqus-integation", 
            "text": "Material for MkDocs is integrated with  Disqus , so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your  mkdocs.yml :  extra : \n   disqus :   your-disqus-shortname   A new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.", 
            "title": "Disqus integation"
        }, 
        {
            "location": "/input/#localization", 
            "text": "Material for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g.  Previous  and  Next  in the footer), you can override the\nfile  partials/language.html  and provide your own translations inside the\nmacro  t :  {%   macro   t ( key )   %}{{   { \n   language :   en , \n   edit.link.title :   Edit this page , \n   footer.previous :   Previous , \n   footer.next :   Next , \n   meta.comments :   Comments , \n   meta.source :   Source , \n   search.placeholder :   Search , \n   search.result.placeholder :   Type to start searching , \n   search.result.none :   No matching documents , \n   search.result.one :   1 matching document , \n   search.result.other :   # matching documents , \n   source.link.title :   Go to repository , \n   toc.title :   Table of contents  }[ key ]   }}{%   endmacro   %}   Just copy the file from the original theme and make your adjustments. See the\nsection on  overriding partials  and the general guide on theme extension  in the customization guide.", 
            "title": "Localization"
        }, 
        {
            "location": "/input/#tabs", 
            "text": "From version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:  extra : \n   feature : \n     tabs :   true", 
            "title": "Tabs"
        }, 
        {
            "location": "/input/#more-advanced-customization", 
            "text": "If you want to change the general appearance of the Material theme, see this article  for more information on advanced customization.", 
            "title": "More advanced customization"
        }, 
        {
            "location": "/input/#extensions", 
            "text": "MkDocs supports several  Markdown extensions . The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)   For more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:   Admonition  Codehilite  Footnotes  Metadata  Permalinks  PyMdown Extensions", 
            "title": "Extensions"
        }, 
        {
            "location": "/input/#full-example", 
            "text": "Below is a full example configuration for a  mkdocs.yml :  # Project information  site_name :   My   Project  site_description :   A   short   description   of   my   project  site_author :   John   Doe  site_url :   https://my-github-handle.github.io/my-project  # Repository  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project  # Copyright  copyright :   Copyright   copy;   2016   -   2017   John   Doe  # Documentation and theme  theme :   material  # Options  extra : \n   logo :   images/logo.svg \n   palette : \n     primary :   indigo \n     accent :   indigo \n   font : \n     text :   Roboto \n     code :   Roboto   Mono \n   social : \n     -   type :   github \n       link :   https://github.com/john-doe \n     -   type :   twitter \n       link :   https://twitter.com/jonh-doe \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/john-doe  # Google Analytics  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto  # Extensions  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)", 
            "title": "Full example"
        }, 
        {
            "location": "/encoding/", 
            "text": "standard-use-case.md# Getting started\n\n\nInstallation\n\n\n\n\nSet up Material using Docker\n\n\nThe official \nDocker image\n for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).\n\n\n\n\nInstalling MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\n\nMkDocs version requirements\n\n\nMaterial requires MkDocs \n= 0.16.\n\n\n\n\nFurthermore, it is highly recommended to install \nPygments\n and the\n\nPyMdown Extensions\n to get the most out of the Material theme:\n\n\npip install pygments\npip install pymdown-extensions\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\npip install mkdocs-material\n\n\n\n\n\nusing choco\n\n\nIf you're on Windows you can use \nChocolatey\n to install \nMaterial\n:\n\n\nchoco install mkdocs-material\n\n\n\n\n\nThis will also install all required dependencies like \nPython\n and\n\nMkDocs\n.\n\n\ncloning from GitHub\n\n\nMaterial can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:\n\n\ngit clone https://github.com/squidfunk/mkdocs-material.git\n\n\n\n\n\nThis is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder\n\nmkdocs-material/material\n.\n\n\nTroubleshooting\n\n\n\n\nInstallation on macOS\n\n\nWhen you're running the pre-installed version of Python on macOS, \npip\n\ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:\n\n\n\n\n\n\nInstalling in user space\n (recommended): Provide the \n--user\n flag\n  to the install command and \npip\n will install the package in a user-site\n  location. This is the recommended way.\n\n\n\n\n\n\nSwitching to a homebrewed Python\n: Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with \npip\n.\n\n\n\n\n\n\n\n\n\n\nError: unrecognized theme 'material'\n\n\nIf you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or \napt-get\n) and the\nMaterial theme through \npip\n, so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.\n\n\n\n\nUsage\n\n\nIn order to enable the Material theme just add one of the following lines to\nyour \nmkdocs.yml\n. If you installed Material using pip:\n\n\ntheme\n:\n \nmaterial\n\n\n\n\n\n\nIf you cloned Material from GitHub:\n\n\ntheme_dir\n:\n \nmkdocs-material/material\n\n\n\n\n\n\nMkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:\n\n\nmkdocs serve\n\n\n\n\n\nNow you can point your browser to \nlocalhost:8000\n and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.\n\n\nOptions\n\n\nThe Material theme adds some extra variables for configuration via your\nproject's \nmkdocs.yml\n. See the following sections for all available options.\n\n\nChanging the color palette\n\n\nMaterial defines a default hue for every primary and accent color on Google's\nMaterial Design \ncolor palette\n. This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nlight\n \nblue\n\n\n\n\n\n\nColor names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are: \nred\n, \npink\n, \npurple\n, \ndeep purple\n,\n\nindigo\n, \nblue\n, \nlight blue\n, \ncyan\n, \nteal\n, \ngreen\n, \nlight green\n, \nlime\n,\n\nyellow\n, \namber\n, \norange\n, \ndeep orange\n, \nbrown\n, \ngrey\n and \nblue grey\n.\nThe last three colors can only be used as a primary color.\n\n\nIf the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on \ncustomization\n for more information.\n\n\nPrimary colors\n\n\nClick on a tile to change the primary color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })\n\n\n\n\nAccent colors\n\n\nClick on a tile to change the accent color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })\n\n\n\n\nChanging the font family\n\n\nMaterial uses the \nRoboto font family\n by default, specifically the regular\nsans-serif type for text and the \nmonospaced\n type for code. Both fonts are\nloaded from \nGoogle Fonts\n and can easily be changed to other fonts, like\nfor example the \nUbuntu font family\n:\n\n\nextra\n:\n\n  \nfont\n:\n\n    \ntext\n:\n \nUbuntu\n\n    \ncode\n:\n \nUbuntu\n \nMono\n\n\n\n\n\n\nThe text font will be loaded in font-weights 400 and \n700\n, the \nmonospaced\n\nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set \nfont\n to \nfalse\n:\n\n\nextra\n:\n\n  \nfont\n:\n \nfalse\n\n\n\n\n\n\nAdding a source repository\n\n\nTo include a link to the repository of your project within your documentation,\nset the following variables via your project's \nmkdocs.yml\n:\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n\n\n\nMaterial will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if \nrepo_url\n points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.\n\n\n\n\nWhy is there an edit button at the top of every article?\n\n\nIf the \nrepo_url\n is set to a GitHub or BitBucket repository, and the\n\nrepo_name\n is set to \nGitHub\n or \nBitBucket\n (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the \nMkDocs documentation\n on more\nguidance regarding the \nedit_uri\n attribute, which defines whether the edit\nbutton is shown or not.\n\n\n\n\nAdding a logo\n\n\nMaterial makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder\n\ndocs/images\n, add your logo and embed it with:\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n\n\n\n\n\nAdding social links\n\n\nIf you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded \nFontAwesome\n webfont. The syntax is simple \u2013 the \ntype\n must\ndenote the name of the social service, e.g. \ngithub\n, \ntwitter\n or \nlinkedin\n\nand the \nlink\n must contain the URL you want to link to:\n\n\nextra\n:\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/squidfunk\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/squidfunk\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/martin-donath-20a95039\n\n\n\n\n\n\nThe links are generated in order and the \ntype\n of the links must match the\nname of the FontAwesome glyph. The \nfa\n is automatically added, so \ngithub\n\nwill result in \nfa fa-github\n.\n\n\nGoogle Analytics integration\n\n\nMkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's\n\nmkdocs.yml\n:\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n\n\n\nDisqus integation\n\n\nMaterial for MkDocs is integrated with \nDisqus\n, so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \ndisqus\n:\n \nyour-disqus-shortname\n\n\n\n\n\n\nA new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.\n\n\nLocalization\n\n\nMaterial for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g. \nPrevious\n and \nNext\n in the footer), you can override the\nfile \npartials/language.html\n and provide your own translations inside the\nmacro \nt\n:\n\n\n{%\n \nmacro\n \nt\n(\nkey\n)\n \n%}{{\n \n{\n\n  \nlanguage\n:\n \nen\n,\n\n  \nedit.link.title\n:\n \nEdit this page\n,\n\n  \nfooter.previous\n:\n \nPrevious\n,\n\n  \nfooter.next\n:\n \nNext\n,\n\n  \nmeta.comments\n:\n \nComments\n,\n\n  \nmeta.source\n:\n \nSource\n,\n\n  \nsearch.placeholder\n:\n \nSearch\n,\n\n  \nsearch.result.placeholder\n:\n \nType to start searching\n,\n\n  \nsearch.result.none\n:\n \nNo matching documents\n,\n\n  \nsearch.result.one\n:\n \n1 matching document\n,\n\n  \nsearch.result.other\n:\n \n# matching documents\n,\n\n  \nsource.link.title\n:\n \nGo to repository\n,\n\n  \ntoc.title\n:\n \nTable of contents\n\n\n}[\nkey\n]\n \n}}{%\n \nendmacro\n \n%}\n\n\n\n\n\n\nJust copy the file from the original theme and make your adjustments. See the\nsection on \noverriding partials\n and the general guide on\n\ntheme extension\n in the customization guide.\n\n\nTabs\n\n\nFrom version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:\n\n\nextra\n:\n\n  \nfeature\n:\n\n    \ntabs\n:\n \ntrue\n\n\n\n\n\n\nMore advanced customization\n\n\nIf you want to change the general appearance of the Material theme, see\n\nthis article\n for more information on advanced customization.\n\n\nExtensions\n\n\nMkDocs supports several \nMarkdown extensions\n. The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)\n\n\n\n\n\n\nFor more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:\n\n\n\n\nAdmonition\n\n\nCodehilite\n\n\nFootnotes\n\n\nMetadata\n\n\nPermalinks\n\n\nPyMdown Extensions\n\n\n\n\nFull example\n\n\nBelow is a full example configuration for a \nmkdocs.yml\n:\n\n\n# Project information\n\n\nsite_name\n:\n \nMy\n \nProject\n\n\nsite_description\n:\n \nA\n \nshort\n \ndescription\n \nof\n \nmy\n \nproject\n\n\nsite_author\n:\n \nJohn\n \nDoe\n\n\nsite_url\n:\n \nhttps://my-github-handle.github.io/my-project\n\n\n\n# Repository\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n# Copyright\n\n\ncopyright\n:\n \nCopyright\n \ncopy;\n \n2016\n \n-\n \n2017\n \nJohn\n \nDoe\n\n\n\n# Documentation and theme\n\n\ntheme\n:\n \nmaterial\n\n\n\n# Options\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nindigo\n\n  \nfont\n:\n\n    \ntext\n:\n \nRoboto\n\n    \ncode\n:\n \nRoboto\n \nMono\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/john-doe\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/jonh-doe\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/john-doe\n\n\n\n# Google Analytics\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n# Extensions\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)", 
            "title": "Encoding layer"
        }, 
        {
            "location": "/encoding/#installation", 
            "text": "Set up Material using Docker  The official  Docker image  for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).", 
            "title": "Installation"
        }, 
        {
            "location": "/encoding/#installing-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  python --version # Python 2.7.13 \npip --version # pip 9.0.1   Installing and verifying MkDocs is as simple as:  pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0    MkDocs version requirements  Material requires MkDocs  = 0.16.   Furthermore, it is highly recommended to install  Pygments  and the PyMdown Extensions  to get the most out of the Material theme:  pip install pygments\npip install pymdown-extensions", 
            "title": "Installing MkDocs"
        }, 
        {
            "location": "/encoding/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/encoding/#using-pip", 
            "text": "Material can be installed with  pip :  pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/encoding/#using-choco", 
            "text": "If you're on Windows you can use  Chocolatey  to install  Material :  choco install mkdocs-material  This will also install all required dependencies like  Python  and MkDocs .", 
            "title": "using choco"
        }, 
        {
            "location": "/encoding/#cloning-from-github", 
            "text": "Material can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:  git clone https://github.com/squidfunk/mkdocs-material.git  This is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder mkdocs-material/material .", 
            "title": "cloning from GitHub"
        }, 
        {
            "location": "/encoding/#troubleshooting", 
            "text": "Installation on macOS  When you're running the pre-installed version of Python on macOS,  pip \ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:    Installing in user space  (recommended): Provide the  --user  flag\n  to the install command and  pip  will install the package in a user-site\n  location. This is the recommended way.    Switching to a homebrewed Python : Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with  pip .      Error: unrecognized theme 'material'  If you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or  apt-get ) and the\nMaterial theme through  pip , so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/encoding/#usage", 
            "text": "In order to enable the Material theme just add one of the following lines to\nyour  mkdocs.yml . If you installed Material using pip:  theme :   material   If you cloned Material from GitHub:  theme_dir :   mkdocs-material/material   MkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:  mkdocs serve  Now you can point your browser to  localhost:8000  and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.", 
            "title": "Usage"
        }, 
        {
            "location": "/encoding/#options", 
            "text": "The Material theme adds some extra variables for configuration via your\nproject's  mkdocs.yml . See the following sections for all available options.", 
            "title": "Options"
        }, 
        {
            "location": "/encoding/#changing-the-color-palette", 
            "text": "Material defines a default hue for every primary and accent color on Google's\nMaterial Design  color palette . This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your  mkdocs.yml :  extra : \n   palette : \n     primary :   indigo \n     accent :   light   blue   Color names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are:  red ,  pink ,  purple ,  deep purple , indigo ,  blue ,  light blue ,  cyan ,  teal ,  green ,  light green ,  lime , yellow ,  amber ,  orange ,  deep orange ,  brown ,  grey  and  blue grey .\nThe last three colors can only be used as a primary color.  If the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on  customization  for more information.", 
            "title": "Changing the color palette"
        }, 
        {
            "location": "/encoding/#primary-colors", 
            "text": "Click on a tile to change the primary color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })", 
            "title": "Primary colors"
        }, 
        {
            "location": "/encoding/#accent-colors", 
            "text": "Click on a tile to change the accent color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })", 
            "title": "Accent colors"
        }, 
        {
            "location": "/encoding/#changing-the-font-family", 
            "text": "Material uses the  Roboto font family  by default, specifically the regular\nsans-serif type for text and the  monospaced  type for code. Both fonts are\nloaded from  Google Fonts  and can easily be changed to other fonts, like\nfor example the  Ubuntu font family :  extra : \n   font : \n     text :   Ubuntu \n     code :   Ubuntu   Mono   The text font will be loaded in font-weights 400 and  700 , the  monospaced \nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set  font  to  false :  extra : \n   font :   false", 
            "title": "Changing the font family"
        }, 
        {
            "location": "/encoding/#adding-a-source-repository", 
            "text": "To include a link to the repository of your project within your documentation,\nset the following variables via your project's  mkdocs.yml :  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project   Material will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if  repo_url  points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.   Why is there an edit button at the top of every article?  If the  repo_url  is set to a GitHub or BitBucket repository, and the repo_name  is set to  GitHub  or  BitBucket  (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the  MkDocs documentation  on more\nguidance regarding the  edit_uri  attribute, which defines whether the edit\nbutton is shown or not.", 
            "title": "Adding a source repository"
        }, 
        {
            "location": "/encoding/#adding-a-logo", 
            "text": "Material makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with:  extra : \n   logo :   images/logo.svg", 
            "title": "Adding a logo"
        }, 
        {
            "location": "/encoding/#adding-social-links", 
            "text": "If you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded  FontAwesome  webfont. The syntax is simple \u2013 the  type  must\ndenote the name of the social service, e.g.  github ,  twitter  or  linkedin \nand the  link  must contain the URL you want to link to:  extra : \n   social : \n     -   type :   github \n       link :   https://github.com/squidfunk \n     -   type :   twitter \n       link :   https://twitter.com/squidfunk \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/martin-donath-20a95039   The links are generated in order and the  type  of the links must match the\nname of the FontAwesome glyph. The  fa  is automatically added, so  github \nwill result in  fa fa-github .", 
            "title": "Adding social links"
        }, 
        {
            "location": "/encoding/#google-analytics-integration", 
            "text": "MkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's mkdocs.yml :  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto", 
            "title": "Google Analytics integration"
        }, 
        {
            "location": "/encoding/#disqus-integation", 
            "text": "Material for MkDocs is integrated with  Disqus , so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your  mkdocs.yml :  extra : \n   disqus :   your-disqus-shortname   A new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.", 
            "title": "Disqus integation"
        }, 
        {
            "location": "/encoding/#localization", 
            "text": "Material for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g.  Previous  and  Next  in the footer), you can override the\nfile  partials/language.html  and provide your own translations inside the\nmacro  t :  {%   macro   t ( key )   %}{{   { \n   language :   en , \n   edit.link.title :   Edit this page , \n   footer.previous :   Previous , \n   footer.next :   Next , \n   meta.comments :   Comments , \n   meta.source :   Source , \n   search.placeholder :   Search , \n   search.result.placeholder :   Type to start searching , \n   search.result.none :   No matching documents , \n   search.result.one :   1 matching document , \n   search.result.other :   # matching documents , \n   source.link.title :   Go to repository , \n   toc.title :   Table of contents  }[ key ]   }}{%   endmacro   %}   Just copy the file from the original theme and make your adjustments. See the\nsection on  overriding partials  and the general guide on theme extension  in the customization guide.", 
            "title": "Localization"
        }, 
        {
            "location": "/encoding/#tabs", 
            "text": "From version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:  extra : \n   feature : \n     tabs :   true", 
            "title": "Tabs"
        }, 
        {
            "location": "/encoding/#more-advanced-customization", 
            "text": "If you want to change the general appearance of the Material theme, see this article  for more information on advanced customization.", 
            "title": "More advanced customization"
        }, 
        {
            "location": "/encoding/#extensions", 
            "text": "MkDocs supports several  Markdown extensions . The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)   For more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:   Admonition  Codehilite  Footnotes  Metadata  Permalinks  PyMdown Extensions", 
            "title": "Extensions"
        }, 
        {
            "location": "/encoding/#full-example", 
            "text": "Below is a full example configuration for a  mkdocs.yml :  # Project information  site_name :   My   Project  site_description :   A   short   description   of   my   project  site_author :   John   Doe  site_url :   https://my-github-handle.github.io/my-project  # Repository  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project  # Copyright  copyright :   Copyright   copy;   2016   -   2017   John   Doe  # Documentation and theme  theme :   material  # Options  extra : \n   logo :   images/logo.svg \n   palette : \n     primary :   indigo \n     accent :   indigo \n   font : \n     text :   Roboto \n     code :   Roboto   Mono \n   social : \n     -   type :   github \n       link :   https://github.com/john-doe \n     -   type :   twitter \n       link :   https://twitter.com/jonh-doe \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/john-doe  # Google Analytics  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto  # Extensions  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)", 
            "title": "Full example"
        }, 
        {
            "location": "/populations-and-networks/", 
            "text": "Getting started\n\n\nInstallation\n\n\n\n\nSet up Material using Docker\n\n\nThe official \nDocker image\n for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).\n\n\n\n\nInstalling MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\n\nMkDocs version requirements\n\n\nMaterial requires MkDocs \n= 0.16.\n\n\n\n\nFurthermore, it is highly recommended to install \nPygments\n and the\n\nPyMdown Extensions\n to get the most out of the Material theme:\n\n\npip install pygments\npip install pymdown-extensions\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\npip install mkdocs-material\n\n\n\n\n\nusing choco\n\n\nIf you're on Windows you can use \nChocolatey\n to install \nMaterial\n:\n\n\nchoco install mkdocs-material\n\n\n\n\n\nThis will also install all required dependencies like \nPython\n and\n\nMkDocs\n.\n\n\ncloning from GitHub\n\n\nMaterial can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:\n\n\ngit clone https://github.com/squidfunk/mkdocs-material.git\n\n\n\n\n\nThis is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder\n\nmkdocs-material/material\n.\n\n\nTroubleshooting\n\n\n\n\nInstallation on macOS\n\n\nWhen you're running the pre-installed version of Python on macOS, \npip\n\ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:\n\n\n\n\n\n\nInstalling in user space\n (recommended): Provide the \n--user\n flag\n  to the install command and \npip\n will install the package in a user-site\n  location. This is the recommended way.\n\n\n\n\n\n\nSwitching to a homebrewed Python\n: Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with \npip\n.\n\n\n\n\n\n\n\n\n\n\nError: unrecognized theme 'material'\n\n\nIf you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or \napt-get\n) and the\nMaterial theme through \npip\n, so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.\n\n\n\n\nUsage\n\n\nIn order to enable the Material theme just add one of the following lines to\nyour \nmkdocs.yml\n. If you installed Material using pip:\n\n\ntheme\n:\n \nmaterial\n\n\n\n\n\n\nIf you cloned Material from GitHub:\n\n\ntheme_dir\n:\n \nmkdocs-material/material\n\n\n\n\n\n\nMkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:\n\n\nmkdocs serve\n\n\n\n\n\nNow you can point your browser to \nlocalhost:8000\n and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.\n\n\nOptions\n\n\nThe Material theme adds some extra variables for configuration via your\nproject's \nmkdocs.yml\n. See the following sections for all available options.\n\n\nChanging the color palette\n\n\nMaterial defines a default hue for every primary and accent color on Google's\nMaterial Design \ncolor palette\n. This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nlight\n \nblue\n\n\n\n\n\n\nColor names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are: \nred\n, \npink\n, \npurple\n, \ndeep purple\n,\n\nindigo\n, \nblue\n, \nlight blue\n, \ncyan\n, \nteal\n, \ngreen\n, \nlight green\n, \nlime\n,\n\nyellow\n, \namber\n, \norange\n, \ndeep orange\n, \nbrown\n, \ngrey\n and \nblue grey\n.\nThe last three colors can only be used as a primary color.\n\n\nIf the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on \ncustomization\n for more information.\n\n\nPrimary colors\n\n\nClick on a tile to change the primary color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })\n\n\n\n\nAccent colors\n\n\nClick on a tile to change the accent color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })\n\n\n\n\nChanging the font family\n\n\nMaterial uses the \nRoboto font family\n by default, specifically the regular\nsans-serif type for text and the \nmonospaced\n type for code. Both fonts are\nloaded from \nGoogle Fonts\n and can easily be changed to other fonts, like\nfor example the \nUbuntu font family\n:\n\n\nextra\n:\n\n  \nfont\n:\n\n    \ntext\n:\n \nUbuntu\n\n    \ncode\n:\n \nUbuntu\n \nMono\n\n\n\n\n\n\nThe text font will be loaded in font-weights 400 and \n700\n, the \nmonospaced\n\nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set \nfont\n to \nfalse\n:\n\n\nextra\n:\n\n  \nfont\n:\n \nfalse\n\n\n\n\n\n\nAdding a source repository\n\n\nTo include a link to the repository of your project within your documentation,\nset the following variables via your project's \nmkdocs.yml\n:\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n\n\n\nMaterial will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if \nrepo_url\n points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.\n\n\n\n\nWhy is there an edit button at the top of every article?\n\n\nIf the \nrepo_url\n is set to a GitHub or BitBucket repository, and the\n\nrepo_name\n is set to \nGitHub\n or \nBitBucket\n (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the \nMkDocs documentation\n on more\nguidance regarding the \nedit_uri\n attribute, which defines whether the edit\nbutton is shown or not.\n\n\n\n\nAdding a logo\n\n\nMaterial makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder\n\ndocs/images\n, add your logo and embed it with:\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n\n\n\n\n\nAdding social links\n\n\nIf you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded \nFontAwesome\n webfont. The syntax is simple \u2013 the \ntype\n must\ndenote the name of the social service, e.g. \ngithub\n, \ntwitter\n or \nlinkedin\n\nand the \nlink\n must contain the URL you want to link to:\n\n\nextra\n:\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/squidfunk\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/squidfunk\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/martin-donath-20a95039\n\n\n\n\n\n\nThe links are generated in order and the \ntype\n of the links must match the\nname of the FontAwesome glyph. The \nfa\n is automatically added, so \ngithub\n\nwill result in \nfa fa-github\n.\n\n\nGoogle Analytics integration\n\n\nMkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's\n\nmkdocs.yml\n:\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n\n\n\nDisqus integation\n\n\nMaterial for MkDocs is integrated with \nDisqus\n, so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \ndisqus\n:\n \nyour-disqus-shortname\n\n\n\n\n\n\nA new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.\n\n\nLocalization\n\n\nMaterial for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g. \nPrevious\n and \nNext\n in the footer), you can override the\nfile \npartials/language.html\n and provide your own translations inside the\nmacro \nt\n:\n\n\n{%\n \nmacro\n \nt\n(\nkey\n)\n \n%}{{\n \n{\n\n  \nlanguage\n:\n \nen\n,\n\n  \nedit.link.title\n:\n \nEdit this page\n,\n\n  \nfooter.previous\n:\n \nPrevious\n,\n\n  \nfooter.next\n:\n \nNext\n,\n\n  \nmeta.comments\n:\n \nComments\n,\n\n  \nmeta.source\n:\n \nSource\n,\n\n  \nsearch.placeholder\n:\n \nSearch\n,\n\n  \nsearch.result.placeholder\n:\n \nType to start searching\n,\n\n  \nsearch.result.none\n:\n \nNo matching documents\n,\n\n  \nsearch.result.one\n:\n \n1 matching document\n,\n\n  \nsearch.result.other\n:\n \n# matching documents\n,\n\n  \nsource.link.title\n:\n \nGo to repository\n,\n\n  \ntoc.title\n:\n \nTable of contents\n\n\n}[\nkey\n]\n \n}}{%\n \nendmacro\n \n%}\n\n\n\n\n\n\nJust copy the file from the original theme and make your adjustments. See the\nsection on \noverriding partials\n and the general guide on\n\ntheme extension\n in the customization guide.\n\n\nTabs\n\n\nFrom version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:\n\n\nextra\n:\n\n  \nfeature\n:\n\n    \ntabs\n:\n \ntrue\n\n\n\n\n\n\nMore advanced customization\n\n\nIf you want to change the general appearance of the Material theme, see\n\nthis article\n for more information on advanced customization.\n\n\nExtensions\n\n\nMkDocs supports several \nMarkdown extensions\n. The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)\n\n\n\n\n\n\nFor more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:\n\n\n\n\nAdmonition\n\n\nCodehilite\n\n\nFootnotes\n\n\nMetadata\n\n\nPermalinks\n\n\nPyMdown Extensions\n\n\n\n\nFull example\n\n\nBelow is a full example configuration for a \nmkdocs.yml\n:\n\n\n# Project information\n\n\nsite_name\n:\n \nMy\n \nProject\n\n\nsite_description\n:\n \nA\n \nshort\n \ndescription\n \nof\n \nmy\n \nproject\n\n\nsite_author\n:\n \nJohn\n \nDoe\n\n\nsite_url\n:\n \nhttps://my-github-handle.github.io/my-project\n\n\n\n# Repository\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n# Copyright\n\n\ncopyright\n:\n \nCopyright\n \ncopy;\n \n2016\n \n-\n \n2017\n \nJohn\n \nDoe\n\n\n\n# Documentation and theme\n\n\ntheme\n:\n \nmaterial\n\n\n\n# Options\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nindigo\n\n  \nfont\n:\n\n    \ntext\n:\n \nRoboto\n\n    \ncode\n:\n \nRoboto\n \nMono\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/john-doe\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/jonh-doe\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/john-doe\n\n\n\n# Google Analytics\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n# Extensions\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)", 
            "title": "Populations and networks"
        }, 
        {
            "location": "/populations-and-networks/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/populations-and-networks/#installation", 
            "text": "Set up Material using Docker  The official  Docker image  for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).", 
            "title": "Installation"
        }, 
        {
            "location": "/populations-and-networks/#installing-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  python --version # Python 2.7.13 \npip --version # pip 9.0.1   Installing and verifying MkDocs is as simple as:  pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0    MkDocs version requirements  Material requires MkDocs  = 0.16.   Furthermore, it is highly recommended to install  Pygments  and the PyMdown Extensions  to get the most out of the Material theme:  pip install pygments\npip install pymdown-extensions", 
            "title": "Installing MkDocs"
        }, 
        {
            "location": "/populations-and-networks/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/populations-and-networks/#using-pip", 
            "text": "Material can be installed with  pip :  pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/populations-and-networks/#using-choco", 
            "text": "If you're on Windows you can use  Chocolatey  to install  Material :  choco install mkdocs-material  This will also install all required dependencies like  Python  and MkDocs .", 
            "title": "using choco"
        }, 
        {
            "location": "/populations-and-networks/#cloning-from-github", 
            "text": "Material can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:  git clone https://github.com/squidfunk/mkdocs-material.git  This is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder mkdocs-material/material .", 
            "title": "cloning from GitHub"
        }, 
        {
            "location": "/populations-and-networks/#troubleshooting", 
            "text": "Installation on macOS  When you're running the pre-installed version of Python on macOS,  pip \ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:    Installing in user space  (recommended): Provide the  --user  flag\n  to the install command and  pip  will install the package in a user-site\n  location. This is the recommended way.    Switching to a homebrewed Python : Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with  pip .      Error: unrecognized theme 'material'  If you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or  apt-get ) and the\nMaterial theme through  pip , so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/populations-and-networks/#usage", 
            "text": "In order to enable the Material theme just add one of the following lines to\nyour  mkdocs.yml . If you installed Material using pip:  theme :   material   If you cloned Material from GitHub:  theme_dir :   mkdocs-material/material   MkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:  mkdocs serve  Now you can point your browser to  localhost:8000  and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.", 
            "title": "Usage"
        }, 
        {
            "location": "/populations-and-networks/#options", 
            "text": "The Material theme adds some extra variables for configuration via your\nproject's  mkdocs.yml . See the following sections for all available options.", 
            "title": "Options"
        }, 
        {
            "location": "/populations-and-networks/#changing-the-color-palette", 
            "text": "Material defines a default hue for every primary and accent color on Google's\nMaterial Design  color palette . This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your  mkdocs.yml :  extra : \n   palette : \n     primary :   indigo \n     accent :   light   blue   Color names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are:  red ,  pink ,  purple ,  deep purple , indigo ,  blue ,  light blue ,  cyan ,  teal ,  green ,  light green ,  lime , yellow ,  amber ,  orange ,  deep orange ,  brown ,  grey  and  blue grey .\nThe last three colors can only be used as a primary color.  If the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on  customization  for more information.", 
            "title": "Changing the color palette"
        }, 
        {
            "location": "/populations-and-networks/#primary-colors", 
            "text": "Click on a tile to change the primary color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })", 
            "title": "Primary colors"
        }, 
        {
            "location": "/populations-and-networks/#accent-colors", 
            "text": "Click on a tile to change the accent color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })", 
            "title": "Accent colors"
        }, 
        {
            "location": "/populations-and-networks/#changing-the-font-family", 
            "text": "Material uses the  Roboto font family  by default, specifically the regular\nsans-serif type for text and the  monospaced  type for code. Both fonts are\nloaded from  Google Fonts  and can easily be changed to other fonts, like\nfor example the  Ubuntu font family :  extra : \n   font : \n     text :   Ubuntu \n     code :   Ubuntu   Mono   The text font will be loaded in font-weights 400 and  700 , the  monospaced \nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set  font  to  false :  extra : \n   font :   false", 
            "title": "Changing the font family"
        }, 
        {
            "location": "/populations-and-networks/#adding-a-source-repository", 
            "text": "To include a link to the repository of your project within your documentation,\nset the following variables via your project's  mkdocs.yml :  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project   Material will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if  repo_url  points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.   Why is there an edit button at the top of every article?  If the  repo_url  is set to a GitHub or BitBucket repository, and the repo_name  is set to  GitHub  or  BitBucket  (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the  MkDocs documentation  on more\nguidance regarding the  edit_uri  attribute, which defines whether the edit\nbutton is shown or not.", 
            "title": "Adding a source repository"
        }, 
        {
            "location": "/populations-and-networks/#adding-a-logo", 
            "text": "Material makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with:  extra : \n   logo :   images/logo.svg", 
            "title": "Adding a logo"
        }, 
        {
            "location": "/populations-and-networks/#adding-social-links", 
            "text": "If you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded  FontAwesome  webfont. The syntax is simple \u2013 the  type  must\ndenote the name of the social service, e.g.  github ,  twitter  or  linkedin \nand the  link  must contain the URL you want to link to:  extra : \n   social : \n     -   type :   github \n       link :   https://github.com/squidfunk \n     -   type :   twitter \n       link :   https://twitter.com/squidfunk \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/martin-donath-20a95039   The links are generated in order and the  type  of the links must match the\nname of the FontAwesome glyph. The  fa  is automatically added, so  github \nwill result in  fa fa-github .", 
            "title": "Adding social links"
        }, 
        {
            "location": "/populations-and-networks/#google-analytics-integration", 
            "text": "MkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's mkdocs.yml :  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto", 
            "title": "Google Analytics integration"
        }, 
        {
            "location": "/populations-and-networks/#disqus-integation", 
            "text": "Material for MkDocs is integrated with  Disqus , so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your  mkdocs.yml :  extra : \n   disqus :   your-disqus-shortname   A new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.", 
            "title": "Disqus integation"
        }, 
        {
            "location": "/populations-and-networks/#localization", 
            "text": "Material for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g.  Previous  and  Next  in the footer), you can override the\nfile  partials/language.html  and provide your own translations inside the\nmacro  t :  {%   macro   t ( key )   %}{{   { \n   language :   en , \n   edit.link.title :   Edit this page , \n   footer.previous :   Previous , \n   footer.next :   Next , \n   meta.comments :   Comments , \n   meta.source :   Source , \n   search.placeholder :   Search , \n   search.result.placeholder :   Type to start searching , \n   search.result.none :   No matching documents , \n   search.result.one :   1 matching document , \n   search.result.other :   # matching documents , \n   source.link.title :   Go to repository , \n   toc.title :   Table of contents  }[ key ]   }}{%   endmacro   %}   Just copy the file from the original theme and make your adjustments. See the\nsection on  overriding partials  and the general guide on theme extension  in the customization guide.", 
            "title": "Localization"
        }, 
        {
            "location": "/populations-and-networks/#tabs", 
            "text": "From version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:  extra : \n   feature : \n     tabs :   true", 
            "title": "Tabs"
        }, 
        {
            "location": "/populations-and-networks/#more-advanced-customization", 
            "text": "If you want to change the general appearance of the Material theme, see this article  for more information on advanced customization.", 
            "title": "More advanced customization"
        }, 
        {
            "location": "/populations-and-networks/#extensions", 
            "text": "MkDocs supports several  Markdown extensions . The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)   For more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:   Admonition  Codehilite  Footnotes  Metadata  Permalinks  PyMdown Extensions", 
            "title": "Extensions"
        }, 
        {
            "location": "/populations-and-networks/#full-example", 
            "text": "Below is a full example configuration for a  mkdocs.yml :  # Project information  site_name :   My   Project  site_description :   A   short   description   of   my   project  site_author :   John   Doe  site_url :   https://my-github-handle.github.io/my-project  # Repository  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project  # Copyright  copyright :   Copyright   copy;   2016   -   2017   John   Doe  # Documentation and theme  theme :   material  # Options  extra : \n   logo :   images/logo.svg \n   palette : \n     primary :   indigo \n     accent :   indigo \n   font : \n     text :   Roboto \n     code :   Roboto   Mono \n   social : \n     -   type :   github \n       link :   https://github.com/john-doe \n     -   type :   twitter \n       link :   https://twitter.com/jonh-doe \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/john-doe  # Google Analytics  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto  # Extensions  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)", 
            "title": "Full example"
        }, 
        {
            "location": "/decoding/", 
            "text": "Getting started\n\n\nInstallation\n\n\n\n\nSet up Material using Docker\n\n\nThe official \nDocker image\n for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).\n\n\n\n\nInstalling MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\n\nMkDocs version requirements\n\n\nMaterial requires MkDocs \n= 0.16.\n\n\n\n\nFurthermore, it is highly recommended to install \nPygments\n and the\n\nPyMdown Extensions\n to get the most out of the Material theme:\n\n\npip install pygments\npip install pymdown-extensions\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\npip install mkdocs-material\n\n\n\n\n\nusing choco\n\n\nIf you're on Windows you can use \nChocolatey\n to install \nMaterial\n:\n\n\nchoco install mkdocs-material\n\n\n\n\n\nThis will also install all required dependencies like \nPython\n and\n\nMkDocs\n.\n\n\ncloning from GitHub\n\n\nMaterial can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:\n\n\ngit clone https://github.com/squidfunk/mkdocs-material.git\n\n\n\n\n\nThis is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder\n\nmkdocs-material/material\n.\n\n\nTroubleshooting\n\n\n\n\nInstallation on macOS\n\n\nWhen you're running the pre-installed version of Python on macOS, \npip\n\ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:\n\n\n\n\n\n\nInstalling in user space\n (recommended): Provide the \n--user\n flag\n  to the install command and \npip\n will install the package in a user-site\n  location. This is the recommended way.\n\n\n\n\n\n\nSwitching to a homebrewed Python\n: Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with \npip\n.\n\n\n\n\n\n\n\n\n\n\nError: unrecognized theme 'material'\n\n\nIf you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or \napt-get\n) and the\nMaterial theme through \npip\n, so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.\n\n\n\n\nUsage\n\n\nIn order to enable the Material theme just add one of the following lines to\nyour \nmkdocs.yml\n. If you installed Material using pip:\n\n\ntheme\n:\n \nmaterial\n\n\n\n\n\n\nIf you cloned Material from GitHub:\n\n\ntheme_dir\n:\n \nmkdocs-material/material\n\n\n\n\n\n\nMkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:\n\n\nmkdocs serve\n\n\n\n\n\nNow you can point your browser to \nlocalhost:8000\n and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.\n\n\nOptions\n\n\nThe Material theme adds some extra variables for configuration via your\nproject's \nmkdocs.yml\n. See the following sections for all available options.\n\n\nChanging the color palette\n\n\nMaterial defines a default hue for every primary and accent color on Google's\nMaterial Design \ncolor palette\n. This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nlight\n \nblue\n\n\n\n\n\n\nColor names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are: \nred\n, \npink\n, \npurple\n, \ndeep purple\n,\n\nindigo\n, \nblue\n, \nlight blue\n, \ncyan\n, \nteal\n, \ngreen\n, \nlight green\n, \nlime\n,\n\nyellow\n, \namber\n, \norange\n, \ndeep orange\n, \nbrown\n, \ngrey\n and \nblue grey\n.\nThe last three colors can only be used as a primary color.\n\n\nIf the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on \ncustomization\n for more information.\n\n\nPrimary colors\n\n\nClick on a tile to change the primary color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })\n\n\n\n\nAccent colors\n\n\nClick on a tile to change the accent color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })\n\n\n\n\nChanging the font family\n\n\nMaterial uses the \nRoboto font family\n by default, specifically the regular\nsans-serif type for text and the \nmonospaced\n type for code. Both fonts are\nloaded from \nGoogle Fonts\n and can easily be changed to other fonts, like\nfor example the \nUbuntu font family\n:\n\n\nextra\n:\n\n  \nfont\n:\n\n    \ntext\n:\n \nUbuntu\n\n    \ncode\n:\n \nUbuntu\n \nMono\n\n\n\n\n\n\nThe text font will be loaded in font-weights 400 and \n700\n, the \nmonospaced\n\nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set \nfont\n to \nfalse\n:\n\n\nextra\n:\n\n  \nfont\n:\n \nfalse\n\n\n\n\n\n\nAdding a source repository\n\n\nTo include a link to the repository of your project within your documentation,\nset the following variables via your project's \nmkdocs.yml\n:\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n\n\n\nMaterial will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if \nrepo_url\n points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.\n\n\n\n\nWhy is there an edit button at the top of every article?\n\n\nIf the \nrepo_url\n is set to a GitHub or BitBucket repository, and the\n\nrepo_name\n is set to \nGitHub\n or \nBitBucket\n (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the \nMkDocs documentation\n on more\nguidance regarding the \nedit_uri\n attribute, which defines whether the edit\nbutton is shown or not.\n\n\n\n\nAdding a logo\n\n\nMaterial makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder\n\ndocs/images\n, add your logo and embed it with:\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n\n\n\n\n\nAdding social links\n\n\nIf you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded \nFontAwesome\n webfont. The syntax is simple \u2013 the \ntype\n must\ndenote the name of the social service, e.g. \ngithub\n, \ntwitter\n or \nlinkedin\n\nand the \nlink\n must contain the URL you want to link to:\n\n\nextra\n:\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/squidfunk\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/squidfunk\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/martin-donath-20a95039\n\n\n\n\n\n\nThe links are generated in order and the \ntype\n of the links must match the\nname of the FontAwesome glyph. The \nfa\n is automatically added, so \ngithub\n\nwill result in \nfa fa-github\n.\n\n\nGoogle Analytics integration\n\n\nMkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's\n\nmkdocs.yml\n:\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n\n\n\nDisqus integation\n\n\nMaterial for MkDocs is integrated with \nDisqus\n, so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \ndisqus\n:\n \nyour-disqus-shortname\n\n\n\n\n\n\nA new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.\n\n\nLocalization\n\n\nMaterial for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g. \nPrevious\n and \nNext\n in the footer), you can override the\nfile \npartials/language.html\n and provide your own translations inside the\nmacro \nt\n:\n\n\n{%\n \nmacro\n \nt\n(\nkey\n)\n \n%}{{\n \n{\n\n  \nlanguage\n:\n \nen\n,\n\n  \nedit.link.title\n:\n \nEdit this page\n,\n\n  \nfooter.previous\n:\n \nPrevious\n,\n\n  \nfooter.next\n:\n \nNext\n,\n\n  \nmeta.comments\n:\n \nComments\n,\n\n  \nmeta.source\n:\n \nSource\n,\n\n  \nsearch.placeholder\n:\n \nSearch\n,\n\n  \nsearch.result.placeholder\n:\n \nType to start searching\n,\n\n  \nsearch.result.none\n:\n \nNo matching documents\n,\n\n  \nsearch.result.one\n:\n \n1 matching document\n,\n\n  \nsearch.result.other\n:\n \n# matching documents\n,\n\n  \nsource.link.title\n:\n \nGo to repository\n,\n\n  \ntoc.title\n:\n \nTable of contents\n\n\n}[\nkey\n]\n \n}}{%\n \nendmacro\n \n%}\n\n\n\n\n\n\nJust copy the file from the original theme and make your adjustments. See the\nsection on \noverriding partials\n and the general guide on\n\ntheme extension\n in the customization guide.\n\n\nTabs\n\n\nFrom version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:\n\n\nextra\n:\n\n  \nfeature\n:\n\n    \ntabs\n:\n \ntrue\n\n\n\n\n\n\nMore advanced customization\n\n\nIf you want to change the general appearance of the Material theme, see\n\nthis article\n for more information on advanced customization.\n\n\nExtensions\n\n\nMkDocs supports several \nMarkdown extensions\n. The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)\n\n\n\n\n\n\nFor more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:\n\n\n\n\nAdmonition\n\n\nCodehilite\n\n\nFootnotes\n\n\nMetadata\n\n\nPermalinks\n\n\nPyMdown Extensions\n\n\n\n\nFull example\n\n\nBelow is a full example configuration for a \nmkdocs.yml\n:\n\n\n# Project information\n\n\nsite_name\n:\n \nMy\n \nProject\n\n\nsite_description\n:\n \nA\n \nshort\n \ndescription\n \nof\n \nmy\n \nproject\n\n\nsite_author\n:\n \nJohn\n \nDoe\n\n\nsite_url\n:\n \nhttps://my-github-handle.github.io/my-project\n\n\n\n# Repository\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n# Copyright\n\n\ncopyright\n:\n \nCopyright\n \ncopy;\n \n2016\n \n-\n \n2017\n \nJohn\n \nDoe\n\n\n\n# Documentation and theme\n\n\ntheme\n:\n \nmaterial\n\n\n\n# Options\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nindigo\n\n  \nfont\n:\n\n    \ntext\n:\n \nRoboto\n\n    \ncode\n:\n \nRoboto\n \nMono\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/john-doe\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/jonh-doe\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/john-doe\n\n\n\n# Google Analytics\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n# Extensions\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)", 
            "title": "Decoding Layer"
        }, 
        {
            "location": "/decoding/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/decoding/#installation", 
            "text": "Set up Material using Docker  The official  Docker image  for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).", 
            "title": "Installation"
        }, 
        {
            "location": "/decoding/#installing-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  python --version # Python 2.7.13 \npip --version # pip 9.0.1   Installing and verifying MkDocs is as simple as:  pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0    MkDocs version requirements  Material requires MkDocs  = 0.16.   Furthermore, it is highly recommended to install  Pygments  and the PyMdown Extensions  to get the most out of the Material theme:  pip install pygments\npip install pymdown-extensions", 
            "title": "Installing MkDocs"
        }, 
        {
            "location": "/decoding/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/decoding/#using-pip", 
            "text": "Material can be installed with  pip :  pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/decoding/#using-choco", 
            "text": "If you're on Windows you can use  Chocolatey  to install  Material :  choco install mkdocs-material  This will also install all required dependencies like  Python  and MkDocs .", 
            "title": "using choco"
        }, 
        {
            "location": "/decoding/#cloning-from-github", 
            "text": "Material can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:  git clone https://github.com/squidfunk/mkdocs-material.git  This is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder mkdocs-material/material .", 
            "title": "cloning from GitHub"
        }, 
        {
            "location": "/decoding/#troubleshooting", 
            "text": "Installation on macOS  When you're running the pre-installed version of Python on macOS,  pip \ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:    Installing in user space  (recommended): Provide the  --user  flag\n  to the install command and  pip  will install the package in a user-site\n  location. This is the recommended way.    Switching to a homebrewed Python : Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with  pip .      Error: unrecognized theme 'material'  If you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or  apt-get ) and the\nMaterial theme through  pip , so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/decoding/#usage", 
            "text": "In order to enable the Material theme just add one of the following lines to\nyour  mkdocs.yml . If you installed Material using pip:  theme :   material   If you cloned Material from GitHub:  theme_dir :   mkdocs-material/material   MkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:  mkdocs serve  Now you can point your browser to  localhost:8000  and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.", 
            "title": "Usage"
        }, 
        {
            "location": "/decoding/#options", 
            "text": "The Material theme adds some extra variables for configuration via your\nproject's  mkdocs.yml . See the following sections for all available options.", 
            "title": "Options"
        }, 
        {
            "location": "/decoding/#changing-the-color-palette", 
            "text": "Material defines a default hue for every primary and accent color on Google's\nMaterial Design  color palette . This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your  mkdocs.yml :  extra : \n   palette : \n     primary :   indigo \n     accent :   light   blue   Color names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are:  red ,  pink ,  purple ,  deep purple , indigo ,  blue ,  light blue ,  cyan ,  teal ,  green ,  light green ,  lime , yellow ,  amber ,  orange ,  deep orange ,  brown ,  grey  and  blue grey .\nThe last three colors can only be used as a primary color.  If the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on  customization  for more information.", 
            "title": "Changing the color palette"
        }, 
        {
            "location": "/decoding/#primary-colors", 
            "text": "Click on a tile to change the primary color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })", 
            "title": "Primary colors"
        }, 
        {
            "location": "/decoding/#accent-colors", 
            "text": "Click on a tile to change the accent color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })", 
            "title": "Accent colors"
        }, 
        {
            "location": "/decoding/#changing-the-font-family", 
            "text": "Material uses the  Roboto font family  by default, specifically the regular\nsans-serif type for text and the  monospaced  type for code. Both fonts are\nloaded from  Google Fonts  and can easily be changed to other fonts, like\nfor example the  Ubuntu font family :  extra : \n   font : \n     text :   Ubuntu \n     code :   Ubuntu   Mono   The text font will be loaded in font-weights 400 and  700 , the  monospaced \nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set  font  to  false :  extra : \n   font :   false", 
            "title": "Changing the font family"
        }, 
        {
            "location": "/decoding/#adding-a-source-repository", 
            "text": "To include a link to the repository of your project within your documentation,\nset the following variables via your project's  mkdocs.yml :  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project   Material will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if  repo_url  points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.   Why is there an edit button at the top of every article?  If the  repo_url  is set to a GitHub or BitBucket repository, and the repo_name  is set to  GitHub  or  BitBucket  (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the  MkDocs documentation  on more\nguidance regarding the  edit_uri  attribute, which defines whether the edit\nbutton is shown or not.", 
            "title": "Adding a source repository"
        }, 
        {
            "location": "/decoding/#adding-a-logo", 
            "text": "Material makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with:  extra : \n   logo :   images/logo.svg", 
            "title": "Adding a logo"
        }, 
        {
            "location": "/decoding/#adding-social-links", 
            "text": "If you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded  FontAwesome  webfont. The syntax is simple \u2013 the  type  must\ndenote the name of the social service, e.g.  github ,  twitter  or  linkedin \nand the  link  must contain the URL you want to link to:  extra : \n   social : \n     -   type :   github \n       link :   https://github.com/squidfunk \n     -   type :   twitter \n       link :   https://twitter.com/squidfunk \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/martin-donath-20a95039   The links are generated in order and the  type  of the links must match the\nname of the FontAwesome glyph. The  fa  is automatically added, so  github \nwill result in  fa fa-github .", 
            "title": "Adding social links"
        }, 
        {
            "location": "/decoding/#google-analytics-integration", 
            "text": "MkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's mkdocs.yml :  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto", 
            "title": "Google Analytics integration"
        }, 
        {
            "location": "/decoding/#disqus-integation", 
            "text": "Material for MkDocs is integrated with  Disqus , so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your  mkdocs.yml :  extra : \n   disqus :   your-disqus-shortname   A new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.", 
            "title": "Disqus integation"
        }, 
        {
            "location": "/decoding/#localization", 
            "text": "Material for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g.  Previous  and  Next  in the footer), you can override the\nfile  partials/language.html  and provide your own translations inside the\nmacro  t :  {%   macro   t ( key )   %}{{   { \n   language :   en , \n   edit.link.title :   Edit this page , \n   footer.previous :   Previous , \n   footer.next :   Next , \n   meta.comments :   Comments , \n   meta.source :   Source , \n   search.placeholder :   Search , \n   search.result.placeholder :   Type to start searching , \n   search.result.none :   No matching documents , \n   search.result.one :   1 matching document , \n   search.result.other :   # matching documents , \n   source.link.title :   Go to repository , \n   toc.title :   Table of contents  }[ key ]   }}{%   endmacro   %}   Just copy the file from the original theme and make your adjustments. See the\nsection on  overriding partials  and the general guide on theme extension  in the customization guide.", 
            "title": "Localization"
        }, 
        {
            "location": "/decoding/#tabs", 
            "text": "From version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:  extra : \n   feature : \n     tabs :   true", 
            "title": "Tabs"
        }, 
        {
            "location": "/decoding/#more-advanced-customization", 
            "text": "If you want to change the general appearance of the Material theme, see this article  for more information on advanced customization.", 
            "title": "More advanced customization"
        }, 
        {
            "location": "/decoding/#extensions", 
            "text": "MkDocs supports several  Markdown extensions . The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)   For more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:   Admonition  Codehilite  Footnotes  Metadata  Permalinks  PyMdown Extensions", 
            "title": "Extensions"
        }, 
        {
            "location": "/decoding/#full-example", 
            "text": "Below is a full example configuration for a  mkdocs.yml :  # Project information  site_name :   My   Project  site_description :   A   short   description   of   my   project  site_author :   John   Doe  site_url :   https://my-github-handle.github.io/my-project  # Repository  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project  # Copyright  copyright :   Copyright   copy;   2016   -   2017   John   Doe  # Documentation and theme  theme :   material  # Options  extra : \n   logo :   images/logo.svg \n   palette : \n     primary :   indigo \n     accent :   indigo \n   font : \n     text :   Roboto \n     code :   Roboto   Mono \n   social : \n     -   type :   github \n       link :   https://github.com/john-doe \n     -   type :   twitter \n       link :   https://twitter.com/jonh-doe \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/john-doe  # Google Analytics  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto  # Extensions  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)", 
            "title": "Full example"
        }, 
        {
            "location": "/analysis-and-visualization/", 
            "text": "Getting started\n\n\nInstallation\n\n\n\n\nSet up Material using Docker\n\n\nThe official \nDocker image\n for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).\n\n\n\n\nInstalling MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\n\nMkDocs version requirements\n\n\nMaterial requires MkDocs \n= 0.16.\n\n\n\n\nFurthermore, it is highly recommended to install \nPygments\n and the\n\nPyMdown Extensions\n to get the most out of the Material theme:\n\n\npip install pygments\npip install pymdown-extensions\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\npip install mkdocs-material\n\n\n\n\n\nusing choco\n\n\nIf you're on Windows you can use \nChocolatey\n to install \nMaterial\n:\n\n\nchoco install mkdocs-material\n\n\n\n\n\nThis will also install all required dependencies like \nPython\n and\n\nMkDocs\n.\n\n\ncloning from GitHub\n\n\nMaterial can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:\n\n\ngit clone https://github.com/squidfunk/mkdocs-material.git\n\n\n\n\n\nThis is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder\n\nmkdocs-material/material\n.\n\n\nTroubleshooting\n\n\n\n\nInstallation on macOS\n\n\nWhen you're running the pre-installed version of Python on macOS, \npip\n\ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:\n\n\n\n\n\n\nInstalling in user space\n (recommended): Provide the \n--user\n flag\n  to the install command and \npip\n will install the package in a user-site\n  location. This is the recommended way.\n\n\n\n\n\n\nSwitching to a homebrewed Python\n: Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with \npip\n.\n\n\n\n\n\n\n\n\n\n\nError: unrecognized theme 'material'\n\n\nIf you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or \napt-get\n) and the\nMaterial theme through \npip\n, so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.\n\n\n\n\nUsage\n\n\nIn order to enable the Material theme just add one of the following lines to\nyour \nmkdocs.yml\n. If you installed Material using pip:\n\n\ntheme\n:\n \nmaterial\n\n\n\n\n\n\nIf you cloned Material from GitHub:\n\n\ntheme_dir\n:\n \nmkdocs-material/material\n\n\n\n\n\n\nMkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:\n\n\nmkdocs serve\n\n\n\n\n\nNow you can point your browser to \nlocalhost:8000\n and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.\n\n\nOptions\n\n\nThe Material theme adds some extra variables for configuration via your\nproject's \nmkdocs.yml\n. See the following sections for all available options.\n\n\nChanging the color palette\n\n\nMaterial defines a default hue for every primary and accent color on Google's\nMaterial Design \ncolor palette\n. This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nlight\n \nblue\n\n\n\n\n\n\nColor names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are: \nred\n, \npink\n, \npurple\n, \ndeep purple\n,\n\nindigo\n, \nblue\n, \nlight blue\n, \ncyan\n, \nteal\n, \ngreen\n, \nlight green\n, \nlime\n,\n\nyellow\n, \namber\n, \norange\n, \ndeep orange\n, \nbrown\n, \ngrey\n and \nblue grey\n.\nThe last three colors can only be used as a primary color.\n\n\nIf the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on \ncustomization\n for more information.\n\n\nPrimary colors\n\n\nClick on a tile to change the primary color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })\n\n\n\n\nAccent colors\n\n\nClick on a tile to change the accent color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })\n\n\n\n\nChanging the font family\n\n\nMaterial uses the \nRoboto font family\n by default, specifically the regular\nsans-serif type for text and the \nmonospaced\n type for code. Both fonts are\nloaded from \nGoogle Fonts\n and can easily be changed to other fonts, like\nfor example the \nUbuntu font family\n:\n\n\nextra\n:\n\n  \nfont\n:\n\n    \ntext\n:\n \nUbuntu\n\n    \ncode\n:\n \nUbuntu\n \nMono\n\n\n\n\n\n\nThe text font will be loaded in font-weights 400 and \n700\n, the \nmonospaced\n\nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set \nfont\n to \nfalse\n:\n\n\nextra\n:\n\n  \nfont\n:\n \nfalse\n\n\n\n\n\n\nAdding a source repository\n\n\nTo include a link to the repository of your project within your documentation,\nset the following variables via your project's \nmkdocs.yml\n:\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n\n\n\nMaterial will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if \nrepo_url\n points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.\n\n\n\n\nWhy is there an edit button at the top of every article?\n\n\nIf the \nrepo_url\n is set to a GitHub or BitBucket repository, and the\n\nrepo_name\n is set to \nGitHub\n or \nBitBucket\n (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the \nMkDocs documentation\n on more\nguidance regarding the \nedit_uri\n attribute, which defines whether the edit\nbutton is shown or not.\n\n\n\n\nAdding a logo\n\n\nMaterial makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder\n\ndocs/images\n, add your logo and embed it with:\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n\n\n\n\n\nAdding social links\n\n\nIf you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded \nFontAwesome\n webfont. The syntax is simple \u2013 the \ntype\n must\ndenote the name of the social service, e.g. \ngithub\n, \ntwitter\n or \nlinkedin\n\nand the \nlink\n must contain the URL you want to link to:\n\n\nextra\n:\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/squidfunk\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/squidfunk\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/martin-donath-20a95039\n\n\n\n\n\n\nThe links are generated in order and the \ntype\n of the links must match the\nname of the FontAwesome glyph. The \nfa\n is automatically added, so \ngithub\n\nwill result in \nfa fa-github\n.\n\n\nGoogle Analytics integration\n\n\nMkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's\n\nmkdocs.yml\n:\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n\n\n\nDisqus integation\n\n\nMaterial for MkDocs is integrated with \nDisqus\n, so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your \nmkdocs.yml\n:\n\n\nextra\n:\n\n  \ndisqus\n:\n \nyour-disqus-shortname\n\n\n\n\n\n\nA new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.\n\n\nLocalization\n\n\nMaterial for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g. \nPrevious\n and \nNext\n in the footer), you can override the\nfile \npartials/language.html\n and provide your own translations inside the\nmacro \nt\n:\n\n\n{%\n \nmacro\n \nt\n(\nkey\n)\n \n%}{{\n \n{\n\n  \nlanguage\n:\n \nen\n,\n\n  \nedit.link.title\n:\n \nEdit this page\n,\n\n  \nfooter.previous\n:\n \nPrevious\n,\n\n  \nfooter.next\n:\n \nNext\n,\n\n  \nmeta.comments\n:\n \nComments\n,\n\n  \nmeta.source\n:\n \nSource\n,\n\n  \nsearch.placeholder\n:\n \nSearch\n,\n\n  \nsearch.result.placeholder\n:\n \nType to start searching\n,\n\n  \nsearch.result.none\n:\n \nNo matching documents\n,\n\n  \nsearch.result.one\n:\n \n1 matching document\n,\n\n  \nsearch.result.other\n:\n \n# matching documents\n,\n\n  \nsource.link.title\n:\n \nGo to repository\n,\n\n  \ntoc.title\n:\n \nTable of contents\n\n\n}[\nkey\n]\n \n}}{%\n \nendmacro\n \n%}\n\n\n\n\n\n\nJust copy the file from the original theme and make your adjustments. See the\nsection on \noverriding partials\n and the general guide on\n\ntheme extension\n in the customization guide.\n\n\nTabs\n\n\nFrom version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:\n\n\nextra\n:\n\n  \nfeature\n:\n\n    \ntabs\n:\n \ntrue\n\n\n\n\n\n\nMore advanced customization\n\n\nIf you want to change the general appearance of the Material theme, see\n\nthis article\n for more information on advanced customization.\n\n\nExtensions\n\n\nMkDocs supports several \nMarkdown extensions\n. The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)\n\n\n\n\n\n\nFor more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:\n\n\n\n\nAdmonition\n\n\nCodehilite\n\n\nFootnotes\n\n\nMetadata\n\n\nPermalinks\n\n\nPyMdown Extensions\n\n\n\n\nFull example\n\n\nBelow is a full example configuration for a \nmkdocs.yml\n:\n\n\n# Project information\n\n\nsite_name\n:\n \nMy\n \nProject\n\n\nsite_description\n:\n \nA\n \nshort\n \ndescription\n \nof\n \nmy\n \nproject\n\n\nsite_author\n:\n \nJohn\n \nDoe\n\n\nsite_url\n:\n \nhttps://my-github-handle.github.io/my-project\n\n\n\n# Repository\n\n\nrepo_name\n:\n \nmy-github-handle/my-project\n\n\nrepo_url\n:\n \nhttps://github.com/my-github-handle/my-project\n\n\n\n# Copyright\n\n\ncopyright\n:\n \nCopyright\n \ncopy;\n \n2016\n \n-\n \n2017\n \nJohn\n \nDoe\n\n\n\n# Documentation and theme\n\n\ntheme\n:\n \nmaterial\n\n\n\n# Options\n\n\nextra\n:\n\n  \nlogo\n:\n \nimages/logo.svg\n\n  \npalette\n:\n\n    \nprimary\n:\n \nindigo\n\n    \naccent\n:\n \nindigo\n\n  \nfont\n:\n\n    \ntext\n:\n \nRoboto\n\n    \ncode\n:\n \nRoboto\n \nMono\n\n  \nsocial\n:\n\n    \n-\n \ntype\n:\n \ngithub\n\n      \nlink\n:\n \nhttps://github.com/john-doe\n\n    \n-\n \ntype\n:\n \ntwitter\n\n      \nlink\n:\n \nhttps://twitter.com/jonh-doe\n\n    \n-\n \ntype\n:\n \nlinkedin\n\n      \nlink\n:\n \nhttps://de.linkedin.com/in/john-doe\n\n\n\n# Google Analytics\n\n\ngoogle_analytics\n:\n\n  \n-\n \nUA-XXXXXXXX-X\n\n  \n-\n \nauto\n\n\n\n# Extensions\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nadmonition\n\n  \n-\n \ncodehilite(guess_lang=false)\n\n  \n-\n \ntoc(permalink=true)", 
            "title": "Analysis and visualization"
        }, 
        {
            "location": "/analysis-and-visualization/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/analysis-and-visualization/#installation", 
            "text": "Set up Material using Docker  The official  Docker image  for Material comes with all dependencies\npre-installed and ready-to-use with the latest version published on PyPI,\npackaged in a very small image (28MB compressed).", 
            "title": "Installation"
        }, 
        {
            "location": "/analysis-and-visualization/#installing-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  python --version # Python 2.7.13 \npip --version # pip 9.0.1   Installing and verifying MkDocs is as simple as:  pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0    MkDocs version requirements  Material requires MkDocs  = 0.16.   Furthermore, it is highly recommended to install  Pygments  and the PyMdown Extensions  to get the most out of the Material theme:  pip install pygments\npip install pymdown-extensions", 
            "title": "Installing MkDocs"
        }, 
        {
            "location": "/analysis-and-visualization/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/analysis-and-visualization/#using-pip", 
            "text": "Material can be installed with  pip :  pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/analysis-and-visualization/#using-choco", 
            "text": "If you're on Windows you can use  Chocolatey  to install  Material :  choco install mkdocs-material  This will also install all required dependencies like  Python  and MkDocs .", 
            "title": "using choco"
        }, 
        {
            "location": "/analysis-and-visualization/#cloning-from-github", 
            "text": "Material can also be used without a system-wide installation by cloning the\nrepository into a subfolder of your project's root directory:  git clone https://github.com/squidfunk/mkdocs-material.git  This is especially useful if you want to extend the theme and override some\nparts of the theme. The theme will reside in the folder mkdocs-material/material .", 
            "title": "cloning from GitHub"
        }, 
        {
            "location": "/analysis-and-visualization/#troubleshooting", 
            "text": "Installation on macOS  When you're running the pre-installed version of Python on macOS,  pip \ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:    Installing in user space  (recommended): Provide the  --user  flag\n  to the install command and  pip  will install the package in a user-site\n  location. This is the recommended way.    Switching to a homebrewed Python : Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with  pip .      Error: unrecognized theme 'material'  If you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or  apt-get ) and the\nMaterial theme through  pip , so both packages end up in different\nlocations. MkDocs only checks it's install location for themes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/analysis-and-visualization/#usage", 
            "text": "In order to enable the Material theme just add one of the following lines to\nyour  mkdocs.yml . If you installed Material using pip:  theme :   material   If you cloned Material from GitHub:  theme_dir :   mkdocs-material/material   MkDocs includes a development server, so you can review your changes as you go.\nThe development server can be started with the following command:  mkdocs serve  Now you can point your browser to  localhost:8000  and the Material theme\nshould be visible. From here on, you can start writing your documentation, or\nread on and customize the theme through some options.", 
            "title": "Usage"
        }, 
        {
            "location": "/analysis-and-visualization/#options", 
            "text": "The Material theme adds some extra variables for configuration via your\nproject's  mkdocs.yml . See the following sections for all available options.", 
            "title": "Options"
        }, 
        {
            "location": "/analysis-and-visualization/#changing-the-color-palette", 
            "text": "Material defines a default hue for every primary and accent color on Google's\nMaterial Design  color palette . This makes it very easy to change the\noverall look of the theme. Just set the primary and accent colors using the\nfollowing variables in your  mkdocs.yml :  extra : \n   palette : \n     primary :   indigo \n     accent :   light   blue   Color names are case-insensitive, but must match the names of the Material\nDesign color palette. Valid values are:  red ,  pink ,  purple ,  deep purple , indigo ,  blue ,  light blue ,  cyan ,  teal ,  green ,  light green ,  lime , yellow ,  amber ,  orange ,  deep orange ,  brown ,  grey  and  blue grey .\nThe last three colors can only be used as a primary color.  If the color is set via this configuration, an additional CSS file that\ndefines the color palette is included. If you want to keep things lean, clone\nthe repository and recompile the theme with your custom colors set. See the\nguide on  customization  for more information.", 
            "title": "Changing the color palette"
        }, 
        {
            "location": "/analysis-and-visualization/#primary-colors", 
            "text": "Click on a tile to change the primary color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })", 
            "title": "Primary colors"
        }, 
        {
            "location": "/analysis-and-visualization/#accent-colors", 
            "text": "Click on a tile to change the accent color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })", 
            "title": "Accent colors"
        }, 
        {
            "location": "/analysis-and-visualization/#changing-the-font-family", 
            "text": "Material uses the  Roboto font family  by default, specifically the regular\nsans-serif type for text and the  monospaced  type for code. Both fonts are\nloaded from  Google Fonts  and can easily be changed to other fonts, like\nfor example the  Ubuntu font family :  extra : \n   font : \n     text :   Ubuntu \n     code :   Ubuntu   Mono   The text font will be loaded in font-weights 400 and  700 , the  monospaced \nfont in regular weight. If you want to load fonts from other destinations or\ndon't want to use the Google Fonts loading magic, just set  font  to  false :  extra : \n   font :   false", 
            "title": "Changing the font family"
        }, 
        {
            "location": "/analysis-and-visualization/#adding-a-source-repository", 
            "text": "To include a link to the repository of your project within your documentation,\nset the following variables via your project's  mkdocs.yml :  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project   Material will render the name of the repository next to the search bar on\nbig screens and as part of the main navigation drawer on smaller screen sizes.\nFurthermore, if  repo_url  points to a GitHub, BitBucket or GitLab repository,\nthe respective service logo will be shown next to the name of the repository.\nAdditionally, for GitHub, the number of stars and forks is shown.   Why is there an edit button at the top of every article?  If the  repo_url  is set to a GitHub or BitBucket repository, and the repo_name  is set to  GitHub  or  BitBucket  (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the  MkDocs documentation  on more\nguidance regarding the  edit_uri  attribute, which defines whether the edit\nbutton is shown or not.", 
            "title": "Adding a source repository"
        }, 
        {
            "location": "/analysis-and-visualization/#adding-a-logo", 
            "text": "Material makes it easy to add your logo. Your logo should have rectangular\nshape with a minimum resolution of 128x128, leave some room towards the edges\nand be composed of high contrast areas on a transparent ground, as it will be\nplaced on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with:  extra : \n   logo :   images/logo.svg", 
            "title": "Adding a logo"
        }, 
        {
            "location": "/analysis-and-visualization/#adding-social-links", 
            "text": "If you want to link your social accounts, the Material theme provides an easy\nway for doing this in the footer of the documentation using the automatically\nincluded  FontAwesome  webfont. The syntax is simple \u2013 the  type  must\ndenote the name of the social service, e.g.  github ,  twitter  or  linkedin \nand the  link  must contain the URL you want to link to:  extra : \n   social : \n     -   type :   github \n       link :   https://github.com/squidfunk \n     -   type :   twitter \n       link :   https://twitter.com/squidfunk \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/martin-donath-20a95039   The links are generated in order and the  type  of the links must match the\nname of the FontAwesome glyph. The  fa  is automatically added, so  github \nwill result in  fa fa-github .", 
            "title": "Adding social links"
        }, 
        {
            "location": "/analysis-and-visualization/#google-analytics-integration", 
            "text": "MkDocs makes it easy to integrate site tracking with Google Analytics.\nBesides basic tracking, clicks on all outgoing links can be tracked as well as\nhow site search is used. Tracking can be activated in your project's mkdocs.yml :  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto", 
            "title": "Google Analytics integration"
        }, 
        {
            "location": "/analysis-and-visualization/#disqus-integation", 
            "text": "Material for MkDocs is integrated with  Disqus , so if you want to add a\ncomments section to your documentation set the shortname of your Disqus project\nin your  mkdocs.yml :  extra : \n   disqus :   your-disqus-shortname   A new entry at the bottom of the table of contents is generated that is linking\nto the comments section. The necessary JavaScript is automatically included.", 
            "title": "Disqus integation"
        }, 
        {
            "location": "/analysis-and-visualization/#localization", 
            "text": "Material for MkDocs supports internationalization (i18n). In order to translate\nthe labels (e.g.  Previous  and  Next  in the footer), you can override the\nfile  partials/language.html  and provide your own translations inside the\nmacro  t :  {%   macro   t ( key )   %}{{   { \n   language :   en , \n   edit.link.title :   Edit this page , \n   footer.previous :   Previous , \n   footer.next :   Next , \n   meta.comments :   Comments , \n   meta.source :   Source , \n   search.placeholder :   Search , \n   search.result.placeholder :   Type to start searching , \n   search.result.none :   No matching documents , \n   search.result.one :   1 matching document , \n   search.result.other :   # matching documents , \n   source.link.title :   Go to repository , \n   toc.title :   Table of contents  }[ key ]   }}{%   endmacro   %}   Just copy the file from the original theme and make your adjustments. See the\nsection on  overriding partials  and the general guide on theme extension  in the customization guide.", 
            "title": "Localization"
        }, 
        {
            "location": "/analysis-and-visualization/#tabs", 
            "text": "From version 1.1.0 on, Material supports another layer on top of the main\nnavigation for larger screens in the form of tabs. This is especially useful\nfor larger documentation projects with a few top-level sections. Tabs can be\nenabled by setting the respective feature flag to true:  extra : \n   feature : \n     tabs :   true", 
            "title": "Tabs"
        }, 
        {
            "location": "/analysis-and-visualization/#more-advanced-customization", 
            "text": "If you want to change the general appearance of the Material theme, see this article  for more information on advanced customization.", 
            "title": "More advanced customization"
        }, 
        {
            "location": "/analysis-and-visualization/#extensions", 
            "text": "MkDocs supports several  Markdown extensions . The following extensions\nare not enabled by default (see the link for which are enabled by default)\nbut highly recommended, so they should be switched on at all times:  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)   For more information, see the following list of extensions supported by the\nMaterial theme including more information regarding installation and usage:   Admonition  Codehilite  Footnotes  Metadata  Permalinks  PyMdown Extensions", 
            "title": "Extensions"
        }, 
        {
            "location": "/analysis-and-visualization/#full-example", 
            "text": "Below is a full example configuration for a  mkdocs.yml :  # Project information  site_name :   My   Project  site_description :   A   short   description   of   my   project  site_author :   John   Doe  site_url :   https://my-github-handle.github.io/my-project  # Repository  repo_name :   my-github-handle/my-project  repo_url :   https://github.com/my-github-handle/my-project  # Copyright  copyright :   Copyright   copy;   2016   -   2017   John   Doe  # Documentation and theme  theme :   material  # Options  extra : \n   logo :   images/logo.svg \n   palette : \n     primary :   indigo \n     accent :   indigo \n   font : \n     text :   Roboto \n     code :   Roboto   Mono \n   social : \n     -   type :   github \n       link :   https://github.com/john-doe \n     -   type :   twitter \n       link :   https://twitter.com/jonh-doe \n     -   type :   linkedin \n       link :   https://de.linkedin.com/in/john-doe  # Google Analytics  google_analytics : \n   -   UA-XXXXXXXX-X \n   -   auto  # Extensions  markdown_extensions : \n   -   admonition \n   -   codehilite(guess_lang=false) \n   -   toc(permalink=true)", 
            "title": "Full example"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Release notes\n\n\nUpgrading\n\n\nTo upgrade Material to the latest version, use pip:\n\n\npip install --upgrade mkdocs-material\n\n\n\n\n\nTo determine the currently installed version, use the following command:\n\n\npip show mkdocs-material \n|\n grep -E ^Version\n\n# Version 1.6.1\n\n\n\n\n\n\nChangelog\n\n\n1.6.1 \n _ April 23, 2017\n\n\n\n\nFixed following of active/focused element if search input is focused\n\n\nFixed layer order of search component elements\n\n\n\n\n1.6.0 \n _ April 22, 2017\n\n\n\n\nAdded build test for Docker image on Travis\n\n\nAdded search overlay for better user experience (focus)\n\n\nAdded language from localizations to \nhtml\n tag\n\n\nFixed \n#270\n: source links broken for absolute URLs\n\n\nFixed missing top spacing for first targeted element in content\n\n\nFixed too small footnote divider when using larger font sizes\n\n\n\n\n1.5.5 \n _ April 20, 2017\n\n\n\n\nFixed \n#282\n: Browser search (\nMeta\n+\nF\n) is hijacked\n\n\n\n\n1.5.4 \n _ April 8, 2017\n\n\n\n\nFixed broken highlighting for two or more search terms\n\n\nFixed missing search results when only a h1 is present\n\n\nFixed unresponsive overlay on Android\n\n\n\n\n1.5.3 \n _ April 7, 2017\n\n\n\n\nFixed deprecated calls for template variables\n\n\nFixed wrong palette color for focused search result\n\n\nFixed JavaScript errors on 404 page\n\n\nFixed missing top spacing on 404 page\n\n\nFixed missing right spacing on overflow of source container\n\n\n\n\n1.5.2 \n _ April 5, 2017\n\n\n\n\nAdded requirements as explicit dependencies in \nsetup.py\n\n\nFixed non-synchronized transitions in search form\n\n\n\n\n1.5.1 \n _ March 30, 2017\n\n\n\n\nFixed rendering and offset of targetted footnotes\n\n\nFixed \n#238\n: Link on logo is not set to \nsite_url\n\n\n\n\n1.5.0 \n _ March 24, 2017\n\n\n\n\nAdded support for localization of search placeholder\n\n\nAdded keyboard events for quick access of search\n\n\nAdded keyboard events for search control\n\n\nAdded opacity on hover for search buttons\n\n\nAdded git hook to skip CI build on non-src changes\n\n\nFixed non-resetting search placeholder when input is cleared\n\n\nFixed error for unescaped parentheses in search term\n\n\nFixed \n#229\n: Button to clear search missing\n\n\nFixed \n#231\n: Escape key doesn't exit search\n\n\nRemoved old-style figures from font feature settings\n\n\n\n\n1.4.1 \n _ March 16, 2017\n\n\n\n\nFixed invalid destructuring attempt on NodeList (in Safari, Edge, IE)\n\n\n\n\n1.4.0 \n _ March 16, 2017\n\n\n\n\nAdded support for grouping searched sections by documents\n\n\nAdded support for highlighting of search terms\n\n\nAdded support for localization of search results\n\n\nFixed \n#216\n: table of contents icon doesn't show if \nh1\n is not present\n\n\nReworked style and layout of search results for better usability\n\n\n\n\n1.3.0 \n _ March 11, 2017\n\n\n\n\nAdded support for page-specific title and description using metadata\n\n\nAdded support for linking source files to documentation\n\n\nFixed jitter and offset of sidebar when zooming browser\n\n\nFixed incorrectly initialized tablet sidebar height\n\n\nFixed regression for \n#1\n: GitHub stars break if \nrepo_url\n ends with a \n/\n\n\nFixed undesired white line below copyright footer due to base font scaling\n\n\nFixed issue with whitespace in path for scripts\n\n\nFixed \n#205\n: support non-fixed (static) header\n\n\nRefactored footnote references for better visibility\n\n\nReduced repaints to a minimum for non-tabs configuration\n\n\nReduced contrast of edit button (slightly)\n\n\n\n\n1.2.0 \n _ March 3, 2017\n\n\n\n\nAdded \nquote\n (synonym: \ncite\n) style for Admonition\n\n\nAdded help message to build pipeline\n\n\nFixed wrong navigation link colors when applying palette\n\n\nFixed \n#197\n: Link missing in tabs navigation on deeply nested items\n\n\nRemoved unnecessary dev dependencies\n\n\n\n\n1.1.1 \n _ February 26, 2017\n\n\n\n\nFixed incorrectly displayed nested lists when using tabs\n\n\n\n\n1.1.0 \n _ February 26, 2017\n\n\n\n\nAdded tabs navigation feature (optional)\n\n\nAdded Disqus integration (optional)\n\n\nAdded a high resolution Favicon with the new logo\n\n\nAdded static type checking using Facebook's Flow\n\n\nFixed \n#173\n: Dictionary elements have no bottom spacing\n\n\nFixed \n#175\n: Tables cannot be set to 100% width\n\n\nFixed race conditions in build related to asset revisioning\n\n\nFixed accidentally re-introduced Permalink on top-level headline\n\n\nFixed alignment of logo in drawer on IE11\n\n\nRefactored styles related to tables\n\n\nRefactored and automated Docker build and PyPI release\n\n\nRefactored build scripts\n\n\n\n\n1.0.5 \n _ February 18, 2017\n\n\n\n\nFixed \n#153\n: Sidebar flows out of constrained area in Chrome 56\n\n\nFixed \n#159\n: Footer jitter due to JavaScript if content is short\n\n\n\n\n1.0.4 \n _ February 16, 2017\n\n\n\n\nFixed \n#142\n: Documentation build errors if \nh1\n is defined as raw HTML\n\n\nFixed \n#164\n: PyPI release does not build and install\n\n\nFixed offsets of targeted headlines\n\n\nIncreased sidebar font size by \n0.12rem\n\n\n\n\n1.0.3 \n _ January 22, 2017\n\n\n\n\nFixed \n#117\n: Table of contents items don't blur on fast scrolling\n\n\nRefactored sidebar positioning logic\n\n\nFurther reduction of repaints\n\n\n\n\n1.0.2 \n _ January 15, 2017\n\n\n\n\nFixed \n#108\n: Horizontal scrollbar in content area\n\n\n\n\n1.0.1 \n _ January 14, 2017\n\n\n\n\nFixed massive repaints happening when scrolling\n\n\nFixed footer back reference positions in case of overflow\n\n\nFixed header logo from showing when the menu icon is rendered\n\n\nChanged scrollbar behavior to only show when content overflows\n\n\n\n\n1.0.0 \n _ January 13, 2017\n\n\n\n\nIntroduced Webpack for more sophisticated JavaScript bundling\n\n\nIntroduced ESLint and Stylelint for code style checks\n\n\nIntroduced more accurate Material Design colors and shadows\n\n\nIntroduced modular scales for harmonic font sizing\n\n\nIntroduced git-hooks for better development workflow\n\n\nRewrite of CSS using the BEM methodology and SassDoc guidelines\n\n\nRewrite of JavaScript using ES6 and Babel as a transpiler\n\n\nRewrite of Admonition, Permalinks and CodeHilite integration\n\n\nRewrite of the complete typographical system\n\n\nRewrite of Gulp asset pipeline in ES6 and separation of tasks\n\n\nRemoved Bower as a dependency in favor of NPM\n\n\nRemoved custom icon build in favor of the Material Design iconset\n\n\nRemoved \n_blank\n targets on links due to vulnerability: \nhttp://bit.ly/1Mk2Rtw\n\n\nRemoved unversioned assets from build directory\n\n\nRestructured templates into base templates and partials\n\n\nAdded build and watch scripts in \npackage.json\n\n\nAdded support for Metadata and Footnotes Markdown extensions\n\n\nAdded support for PyMdown Extensions package\n\n\nAdded support for collapsible sections in navigation\n\n\nAdded support for separate table of contents\n\n\nAdded support for better accessibility through REM-based layout\n\n\nAdded icons for GitHub, GitLab and BitBucket integrations\n\n\nAdded more detailed documentation on specimen, extensions etc.\n\n\nAdded a \n404.html\n error page for deployment on GitHub Pages\n\n\nFixed live reload chain in watch mode when saving a template\n\n\nFixed variable references to work with MkDocs 0.16\n\n\n\n\n0.2.4 \n _ June 26, 2016\n\n\n\n\nFixed improperly set default favicon\n\n\nFixed \n#33\n: Protocol relative URL for webfonts doesn't work with\n  \nfile://\n\n\nFixed \n#34\n: IE11 on Windows 7 doesn't honor \nmax-width\n on \nmain\n tag\n\n\nFixed \n#35\n: Add styling for blockquotes\n\n\n\n\n0.2.3 \n _ May 16, 2016\n\n\n\n\nFixed \n#25\n: Highlight inline fenced blocks\n\n\nFixed \n#26\n: Better highlighting for keystrokes\n\n\nFixed \n#30\n: Suboptimal syntax highlighting for PHP\n\n\n\n\n0.2.2 \n _ March 20, 2016\n\n\n\n\nFixed \n#15\n: Document Pygments dependency for CodeHilite\n\n\nFixed \n#16\n: Favicon could not be set through \nmkdocs.yml\n\n\nFixed \n#17\n: Put version into own container for styling\n\n\nFixed \n#20\n: Fix rounded borders for tables\n\n\n\n\n0.2.1 \n _ March 12, 2016\n\n\n\n\nFixed \n#10\n: Invisible header after closing search bar with\n  \nESC\n key\n\n\nFixed \n#13\n: Table cells don't wrap\n\n\nFixed empty list in table of contents when no headline is defined\n\n\nCorrected wrong path for static asset monitoring in Gulpfile.js\n\n\nSet up tracking of site search for Google Analytics\n\n\n\n\n0.2.0 \n _ February 24, 2016\n\n\n\n\nFixed \n#6\n: Include multiple color palettes via \nmkdocs.yml\n\n\nFixed \n#7\n: Better colors for links inside admonition notes and warnings\n\n\nFixed \n#9\n: Text for prev/next footer navigation should be customizable\n\n\nRefactored templates (replaced \nif\n/\nelse\n with modifiers where possible)\n\n\n\n\n0.1.3 \n _ February 21, 2016\n\n\n\n\nFixed \n#3\n: Ordered lists within an unordered list have \n::before\n content\n\n\nFixed \n#4\n: Click on Logo/Title without Github-Repository: \nNone\n\n\nFixed \n#5\n: Page without headlines renders empty list in table of contents\n\n\nMoved Modernizr to top to ensure basic usability in IE8\n\n\n\n\n0.1.2 \n _ February 16, 2016\n\n\n\n\nFixed styles for deep navigational hierarchies\n\n\nFixed webfont delivery problem when hosted in subdirectories\n\n\nFixed print styles in mobile/tablet configuration\n\n\nAdded option to configure fonts in \nmkdocs.yml\n with fallbacks\n\n\nChanged styles for admonition notes and warnings\n\n\nSet download link to latest version if available\n\n\nSet up tracking of outgoing links and actions for Google Analytics\n\n\n\n\n0.1.1 \n _ February 11, 2016\n\n\n\n\nFixed \n#1\n: GitHub stars don't work if the repo_url ends with a \n/\n\n\nUpdated NPM and Bower dependencies to most recent versions\n\n\nChanged footer/copyright link to Material theme to GitHub pages\n\n\nMade MkDocs building/serving in build process optional\n\n\nSet up continuous integration with \nTravis\n\n\n\n\n0.1.0 \n _ February 9, 2016\n\n\n\n\nInitial release", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/#release-notes", 
            "text": "", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/#upgrading", 
            "text": "To upgrade Material to the latest version, use pip:  pip install --upgrade mkdocs-material  To determine the currently installed version, use the following command:  pip show mkdocs-material  |  grep -E ^Version # Version 1.6.1", 
            "title": "Upgrading"
        }, 
        {
            "location": "/release-notes/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-notes/#161-_-april-23-2017", 
            "text": "Fixed following of active/focused element if search input is focused  Fixed layer order of search component elements", 
            "title": "1.6.1  _ April 23, 2017"
        }, 
        {
            "location": "/release-notes/#160-_-april-22-2017", 
            "text": "Added build test for Docker image on Travis  Added search overlay for better user experience (focus)  Added language from localizations to  html  tag  Fixed  #270 : source links broken for absolute URLs  Fixed missing top spacing for first targeted element in content  Fixed too small footnote divider when using larger font sizes", 
            "title": "1.6.0  _ April 22, 2017"
        }, 
        {
            "location": "/release-notes/#155-_-april-20-2017", 
            "text": "Fixed  #282 : Browser search ( Meta + F ) is hijacked", 
            "title": "1.5.5  _ April 20, 2017"
        }, 
        {
            "location": "/release-notes/#154-_-april-8-2017", 
            "text": "Fixed broken highlighting for two or more search terms  Fixed missing search results when only a h1 is present  Fixed unresponsive overlay on Android", 
            "title": "1.5.4  _ April 8, 2017"
        }, 
        {
            "location": "/release-notes/#153-_-april-7-2017", 
            "text": "Fixed deprecated calls for template variables  Fixed wrong palette color for focused search result  Fixed JavaScript errors on 404 page  Fixed missing top spacing on 404 page  Fixed missing right spacing on overflow of source container", 
            "title": "1.5.3  _ April 7, 2017"
        }, 
        {
            "location": "/release-notes/#152-_-april-5-2017", 
            "text": "Added requirements as explicit dependencies in  setup.py  Fixed non-synchronized transitions in search form", 
            "title": "1.5.2  _ April 5, 2017"
        }, 
        {
            "location": "/release-notes/#151-_-march-30-2017", 
            "text": "Fixed rendering and offset of targetted footnotes  Fixed  #238 : Link on logo is not set to  site_url", 
            "title": "1.5.1  _ March 30, 2017"
        }, 
        {
            "location": "/release-notes/#150-_-march-24-2017", 
            "text": "Added support for localization of search placeholder  Added keyboard events for quick access of search  Added keyboard events for search control  Added opacity on hover for search buttons  Added git hook to skip CI build on non-src changes  Fixed non-resetting search placeholder when input is cleared  Fixed error for unescaped parentheses in search term  Fixed  #229 : Button to clear search missing  Fixed  #231 : Escape key doesn't exit search  Removed old-style figures from font feature settings", 
            "title": "1.5.0  _ March 24, 2017"
        }, 
        {
            "location": "/release-notes/#141-_-march-16-2017", 
            "text": "Fixed invalid destructuring attempt on NodeList (in Safari, Edge, IE)", 
            "title": "1.4.1  _ March 16, 2017"
        }, 
        {
            "location": "/release-notes/#140-_-march-16-2017", 
            "text": "Added support for grouping searched sections by documents  Added support for highlighting of search terms  Added support for localization of search results  Fixed  #216 : table of contents icon doesn't show if  h1  is not present  Reworked style and layout of search results for better usability", 
            "title": "1.4.0  _ March 16, 2017"
        }, 
        {
            "location": "/release-notes/#130-_-march-11-2017", 
            "text": "Added support for page-specific title and description using metadata  Added support for linking source files to documentation  Fixed jitter and offset of sidebar when zooming browser  Fixed incorrectly initialized tablet sidebar height  Fixed regression for  #1 : GitHub stars break if  repo_url  ends with a  /  Fixed undesired white line below copyright footer due to base font scaling  Fixed issue with whitespace in path for scripts  Fixed  #205 : support non-fixed (static) header  Refactored footnote references for better visibility  Reduced repaints to a minimum for non-tabs configuration  Reduced contrast of edit button (slightly)", 
            "title": "1.3.0  _ March 11, 2017"
        }, 
        {
            "location": "/release-notes/#120-_-march-3-2017", 
            "text": "Added  quote  (synonym:  cite ) style for Admonition  Added help message to build pipeline  Fixed wrong navigation link colors when applying palette  Fixed  #197 : Link missing in tabs navigation on deeply nested items  Removed unnecessary dev dependencies", 
            "title": "1.2.0  _ March 3, 2017"
        }, 
        {
            "location": "/release-notes/#111-_-february-26-2017", 
            "text": "Fixed incorrectly displayed nested lists when using tabs", 
            "title": "1.1.1  _ February 26, 2017"
        }, 
        {
            "location": "/release-notes/#110-_-february-26-2017", 
            "text": "Added tabs navigation feature (optional)  Added Disqus integration (optional)  Added a high resolution Favicon with the new logo  Added static type checking using Facebook's Flow  Fixed  #173 : Dictionary elements have no bottom spacing  Fixed  #175 : Tables cannot be set to 100% width  Fixed race conditions in build related to asset revisioning  Fixed accidentally re-introduced Permalink on top-level headline  Fixed alignment of logo in drawer on IE11  Refactored styles related to tables  Refactored and automated Docker build and PyPI release  Refactored build scripts", 
            "title": "1.1.0  _ February 26, 2017"
        }, 
        {
            "location": "/release-notes/#105-_-february-18-2017", 
            "text": "Fixed  #153 : Sidebar flows out of constrained area in Chrome 56  Fixed  #159 : Footer jitter due to JavaScript if content is short", 
            "title": "1.0.5  _ February 18, 2017"
        }, 
        {
            "location": "/release-notes/#104-_-february-16-2017", 
            "text": "Fixed  #142 : Documentation build errors if  h1  is defined as raw HTML  Fixed  #164 : PyPI release does not build and install  Fixed offsets of targeted headlines  Increased sidebar font size by  0.12rem", 
            "title": "1.0.4  _ February 16, 2017"
        }, 
        {
            "location": "/release-notes/#103-_-january-22-2017", 
            "text": "Fixed  #117 : Table of contents items don't blur on fast scrolling  Refactored sidebar positioning logic  Further reduction of repaints", 
            "title": "1.0.3  _ January 22, 2017"
        }, 
        {
            "location": "/release-notes/#102-_-january-15-2017", 
            "text": "Fixed  #108 : Horizontal scrollbar in content area", 
            "title": "1.0.2  _ January 15, 2017"
        }, 
        {
            "location": "/release-notes/#101-_-january-14-2017", 
            "text": "Fixed massive repaints happening when scrolling  Fixed footer back reference positions in case of overflow  Fixed header logo from showing when the menu icon is rendered  Changed scrollbar behavior to only show when content overflows", 
            "title": "1.0.1  _ January 14, 2017"
        }, 
        {
            "location": "/release-notes/#100-_-january-13-2017", 
            "text": "Introduced Webpack for more sophisticated JavaScript bundling  Introduced ESLint and Stylelint for code style checks  Introduced more accurate Material Design colors and shadows  Introduced modular scales for harmonic font sizing  Introduced git-hooks for better development workflow  Rewrite of CSS using the BEM methodology and SassDoc guidelines  Rewrite of JavaScript using ES6 and Babel as a transpiler  Rewrite of Admonition, Permalinks and CodeHilite integration  Rewrite of the complete typographical system  Rewrite of Gulp asset pipeline in ES6 and separation of tasks  Removed Bower as a dependency in favor of NPM  Removed custom icon build in favor of the Material Design iconset  Removed  _blank  targets on links due to vulnerability:  http://bit.ly/1Mk2Rtw  Removed unversioned assets from build directory  Restructured templates into base templates and partials  Added build and watch scripts in  package.json  Added support for Metadata and Footnotes Markdown extensions  Added support for PyMdown Extensions package  Added support for collapsible sections in navigation  Added support for separate table of contents  Added support for better accessibility through REM-based layout  Added icons for GitHub, GitLab and BitBucket integrations  Added more detailed documentation on specimen, extensions etc.  Added a  404.html  error page for deployment on GitHub Pages  Fixed live reload chain in watch mode when saving a template  Fixed variable references to work with MkDocs 0.16", 
            "title": "1.0.0  _ January 13, 2017"
        }, 
        {
            "location": "/release-notes/#024-_-june-26-2016", 
            "text": "Fixed improperly set default favicon  Fixed  #33 : Protocol relative URL for webfonts doesn't work with\n   file://  Fixed  #34 : IE11 on Windows 7 doesn't honor  max-width  on  main  tag  Fixed  #35 : Add styling for blockquotes", 
            "title": "0.2.4  _ June 26, 2016"
        }, 
        {
            "location": "/release-notes/#023-_-may-16-2016", 
            "text": "Fixed  #25 : Highlight inline fenced blocks  Fixed  #26 : Better highlighting for keystrokes  Fixed  #30 : Suboptimal syntax highlighting for PHP", 
            "title": "0.2.3  _ May 16, 2016"
        }, 
        {
            "location": "/release-notes/#022-_-march-20-2016", 
            "text": "Fixed  #15 : Document Pygments dependency for CodeHilite  Fixed  #16 : Favicon could not be set through  mkdocs.yml  Fixed  #17 : Put version into own container for styling  Fixed  #20 : Fix rounded borders for tables", 
            "title": "0.2.2  _ March 20, 2016"
        }, 
        {
            "location": "/release-notes/#021-_-march-12-2016", 
            "text": "Fixed  #10 : Invisible header after closing search bar with\n   ESC  key  Fixed  #13 : Table cells don't wrap  Fixed empty list in table of contents when no headline is defined  Corrected wrong path for static asset monitoring in Gulpfile.js  Set up tracking of site search for Google Analytics", 
            "title": "0.2.1  _ March 12, 2016"
        }, 
        {
            "location": "/release-notes/#020-_-february-24-2016", 
            "text": "Fixed  #6 : Include multiple color palettes via  mkdocs.yml  Fixed  #7 : Better colors for links inside admonition notes and warnings  Fixed  #9 : Text for prev/next footer navigation should be customizable  Refactored templates (replaced  if / else  with modifiers where possible)", 
            "title": "0.2.0  _ February 24, 2016"
        }, 
        {
            "location": "/release-notes/#013-_-february-21-2016", 
            "text": "Fixed  #3 : Ordered lists within an unordered list have  ::before  content  Fixed  #4 : Click on Logo/Title without Github-Repository:  None  Fixed  #5 : Page without headlines renders empty list in table of contents  Moved Modernizr to top to ensure basic usability in IE8", 
            "title": "0.1.3  _ February 21, 2016"
        }, 
        {
            "location": "/release-notes/#012-_-february-16-2016", 
            "text": "Fixed styles for deep navigational hierarchies  Fixed webfont delivery problem when hosted in subdirectories  Fixed print styles in mobile/tablet configuration  Added option to configure fonts in  mkdocs.yml  with fallbacks  Changed styles for admonition notes and warnings  Set download link to latest version if available  Set up tracking of outgoing links and actions for Google Analytics", 
            "title": "0.1.2  _ February 16, 2016"
        }, 
        {
            "location": "/release-notes/#011-_-february-11-2016", 
            "text": "Fixed  #1 : GitHub stars don't work if the repo_url ends with a  /  Updated NPM and Bower dependencies to most recent versions  Changed footer/copyright link to Material theme to GitHub pages  Made MkDocs building/serving in build process optional  Set up continuous integration with  Travis", 
            "title": "0.1.1  _ February 11, 2016"
        }, 
        {
            "location": "/release-notes/#010-_-february-9-2016", 
            "text": "Initial release", 
            "title": "0.1.0  _ February 9, 2016"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nInterested in contributing to the Material theme? Want to report a bug? Before\nyou do, please read the following guidelines.\n\n\nSubmission context\n\n\nGot a question or problem?\n\n\nFor quick questions there's no need to open an issue as you can reach us on\n\ngitter.im\n.\n\n\nFound a bug?\n\n\nIf you found a bug in the source code, you can help us by submitting an issue\nto the \nissue tracker\n in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the\n\nsubmission guidelines\n.\n\n\nMissing a feature?\n\n\nYou can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:\n\n\n\n\n\n\nFor a \nmajor feature\n, first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.\n\n\n\n\n\n\nSmall features and bugs\n can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.\n\n\n\n\n\n\nSubmission guidelines\n\n\nSubmitting an issue\n\n\nBefore you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.\n\n\nWe want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.\n\n\nUnfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.\n\n\nSubmitting a Pull Request (PR)\n\n\nSearch GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.\n\n\n\n\n\n\nDevelopment\n: Fork the project, set up the \ndevelopment environment\n,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.\n\n\n\n\n\n\nBuild\n: Before submitting a pull requests, build the theme. This is a\n  mandatory requirement for your PR to get accepted, as the theme should at\n  all times be installable through GitHub.\n\n\n\n\n\n\nPull Request\n: After building the theme, commit the compiled output, push\n  your branch to GitHub and send a PR to \nmkdocs-material:master\n. If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.\n\n\n\n\n\n\nAfter your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Interested in contributing to the Material theme? Want to report a bug? Before\nyou do, please read the following guidelines.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#submission-context", 
            "text": "", 
            "title": "Submission context"
        }, 
        {
            "location": "/contributing/#got-a-question-or-problem", 
            "text": "For quick questions there's no need to open an issue as you can reach us on gitter.im .", 
            "title": "Got a question or problem?"
        }, 
        {
            "location": "/contributing/#found-a-bug", 
            "text": "If you found a bug in the source code, you can help us by submitting an issue\nto the  issue tracker  in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the submission guidelines .", 
            "title": "Found a bug?"
        }, 
        {
            "location": "/contributing/#missing-a-feature", 
            "text": "You can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:    For a  major feature , first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.    Small features and bugs  can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.", 
            "title": "Missing a feature?"
        }, 
        {
            "location": "/contributing/#submission-guidelines", 
            "text": "", 
            "title": "Submission guidelines"
        }, 
        {
            "location": "/contributing/#submitting-an-issue", 
            "text": "Before you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.  We want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.  Unfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.", 
            "title": "Submitting an issue"
        }, 
        {
            "location": "/contributing/#submitting-a-pull-request-pr", 
            "text": "Search GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.    Development : Fork the project, set up the  development environment ,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.    Build : Before submitting a pull requests, build the theme. This is a\n  mandatory requirement for your PR to get accepted, as the theme should at\n  all times be installable through GitHub.    Pull Request : After building the theme, commit the compiled output, push\n  your branch to GitHub and send a PR to  mkdocs-material:master . If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.    After your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.", 
            "title": "Submitting a Pull Request (PR)"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nMIT License\n\n\nCopyright \n 2016 - 2017 Martin Donath\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT License  Copyright   2016 - 2017 Martin Donath  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}