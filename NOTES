===============================


#################################################
#     Initial notes on parameter refactoring    #
#################################################

Talking points:
- emoo / range > 3: not entirely sure...


********************************************
***             Questions                ***
********************************************




#################################################
####            REFACTORING ANALYSIS         ####
#################################################
class ActivityAnalysis:
    - analyse_spiking (new)
        - compute_synchrony
        - compute_isi_stats
        - compute_spike_stats
        - compute_time_resolved_statistics
    - analyse_analog (new)
        - compute_analog_stats
    
    [do the following belong here?]
    - analyse_state_divergence
    - analyse_activity_dynamics [RENAME?]
    - analyse_state_matrix      [redundant with analyse_activity_dynamics?]

    [remove]
    x characterize_population_activity - this can go as it's replaced by analyse_spiking and analyse_analog
    
###
class PerformanceAnalysis:
    - analyse_performance_results
    - ... some other functions?

###
Other stuff:
    - readout_test / train should be methods of the Readout class.. they're getting a readout as a parameter.
    - structure results dict. Turn it into a Result(dict) class, and make a clear structure in it, with variables created during class creation:
        - population_name
            - performance
            - rank
            - dimensionality
            - ...
        +++ Advantages:
            +++ easier to pass around between activity / performance - analysis, other functions
            +++ easier to document it: users might want to know what metrics are stored by which key in results{...}, 
                in order to do some custom post processing. 
